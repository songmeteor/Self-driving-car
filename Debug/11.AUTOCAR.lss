
11.AUTOCAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  00001972  00001a06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001972  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b9  00800298  00800298  00001b9e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002142  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001246  00000000  00000000  00004026  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001343  00000000  00000000  0000526c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a4  00000000  00000000  000065b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099e  00000000  00000000  00006c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ef7  00000000  00000000  000075f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  000084e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	77 c0       	rjmp	.+238    	; 0xf0 <__ctors_end>
       2:	00 00       	nop
       4:	93 c0       	rjmp	.+294    	; 0x12c <__bad_interrupt>
       6:	00 00       	nop
       8:	91 c0       	rjmp	.+290    	; 0x12c <__bad_interrupt>
       a:	00 00       	nop
       c:	8f c0       	rjmp	.+286    	; 0x12c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
      12:	00 00       	nop
      14:	12 c7       	rjmp	.+3620   	; 0xe3a <__vector_5>
      16:	00 00       	nop
      18:	58 c7       	rjmp	.+3760   	; 0xeca <__vector_6>
      1a:	00 00       	nop
      1c:	9e c7       	rjmp	.+3900   	; 0xf5a <__vector_7>
      1e:	00 00       	nop
      20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	77 c0       	rjmp	.+238    	; 0x12c <__bad_interrupt>
      3e:	00 00       	nop
      40:	d0 c3       	rjmp	.+1952   	; 0x7e2 <__vector_16>
      42:	00 00       	nop
      44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
      46:	00 00       	nop
      48:	2c c6       	rjmp	.+3160   	; 0xca2 <__vector_18>
      4a:	00 00       	nop
      4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
      52:	00 00       	nop
      54:	6b c0       	rjmp	.+214    	; 0x12c <__bad_interrupt>
      56:	00 00       	nop
      58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
      62:	00 00       	nop
      64:	63 c0       	rjmp	.+198    	; 0x12c <__bad_interrupt>
      66:	00 00       	nop
      68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
      76:	00 00       	nop
      78:	9e c6       	rjmp	.+3388   	; 0xdb6 <__vector_30>
      7a:	00 00       	nop
      7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cb 03       	fmulsu	r20, r19
      8e:	d8 03       	fmulsu	r21, r16
      90:	d8 03       	fmulsu	r21, r16
      92:	d8 03       	fmulsu	r21, r16
      94:	c7 03       	fmuls	r20, r23
      96:	d8 03       	fmulsu	r21, r16
      98:	d8 03       	fmulsu	r21, r16
      9a:	d8 03       	fmulsu	r21, r16
      9c:	d8 03       	fmulsu	r21, r16
      9e:	d8 03       	fmulsu	r21, r16
      a0:	cf 03       	fmulsu	r20, r23
      a2:	d8 03       	fmulsu	r21, r16
      a4:	d8 03       	fmulsu	r21, r16
      a6:	d8 03       	fmulsu	r21, r16
      a8:	d8 03       	fmulsu	r21, r16
      aa:	d8 03       	fmulsu	r21, r16
      ac:	d3 03       	fmuls	r21, r19
      ae:	d7 03       	fmuls	r21, r23
      b0:	d8 03       	fmulsu	r21, r16
      b2:	d8 03       	fmulsu	r21, r16
      b4:	d8 03       	fmulsu	r21, r16
      b6:	d8 03       	fmulsu	r21, r16
      b8:	d8 03       	fmulsu	r21, r16
      ba:	d8 03       	fmulsu	r21, r16
      bc:	d8 03       	fmulsu	r21, r16
      be:	d8 03       	fmulsu	r21, r16
      c0:	d8 03       	fmulsu	r21, r16
      c2:	d8 03       	fmulsu	r21, r16
      c4:	d8 03       	fmulsu	r21, r16
      c6:	d8 03       	fmulsu	r21, r16
      c8:	d8 03       	fmulsu	r21, r16
      ca:	d8 03       	fmulsu	r21, r16
      cc:	cb 03       	fmulsu	r20, r19
      ce:	d8 03       	fmulsu	r21, r16
      d0:	d8 03       	fmulsu	r21, r16
      d2:	d8 03       	fmulsu	r21, r16
      d4:	c7 03       	fmuls	r20, r23
      d6:	d8 03       	fmulsu	r21, r16
      d8:	d8 03       	fmulsu	r21, r16
      da:	d8 03       	fmulsu	r21, r16
      dc:	d8 03       	fmulsu	r21, r16
      de:	d8 03       	fmulsu	r21, r16
      e0:	cf 03       	fmulsu	r20, r23
      e2:	d8 03       	fmulsu	r21, r16
      e4:	d8 03       	fmulsu	r21, r16
      e6:	d8 03       	fmulsu	r21, r16
      e8:	d8 03       	fmulsu	r21, r16
      ea:	d8 03       	fmulsu	r21, r16
      ec:	d3 03       	fmuls	r21, r19
      ee:	d7 03       	fmuls	r21, r23

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d0 e1       	ldi	r29, 0x10	; 16
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
      fc:	12 e0       	ldi	r17, 0x02	; 2
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	e2 e7       	ldi	r30, 0x72	; 114
     104:	f9 e1       	ldi	r31, 0x19	; 25
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	0b bf       	out	0x3b, r16	; 59
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x14>
     10c:	07 90       	elpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	a8 39       	cpi	r26, 0x98	; 152
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0x10>

00000116 <__do_clear_bss>:
     116:	24 e0       	ldi	r18, 0x04	; 4
     118:	a8 e9       	ldi	r26, 0x98	; 152
     11a:	b2 e0       	ldi	r27, 0x02	; 2
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	a1 35       	cpi	r26, 0x51	; 81
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	03 d5       	rcall	.+2566   	; 0xb2e <main>
     128:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <_exit>

0000012c <__bad_interrupt>:
     12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <init_button>:
void init_button(void);
int get_button(int button_num, int button_pin);
                                        
void init_button(void)
{
	BUTTON_DDR &= ~( 1 << BUTTON0PIN );
     12e:	bf 98       	cbi	0x17, 7	; 23
     130:	08 95       	ret

00000132 <get_button>:
// BUTTON0PIN : button_pin  
// 리턴값 : 1 :  버튼을 눌렀다 떼면 1을 return 
//          0 :  ide 

int get_button(int button_num, int button_pin)
{
     132:	fc 01       	movw	r30, r24
	static unsigned char button_status[BUTTON_NUMER] = {BUTTON_RELEASE};
	// 	지역 변수에 static을 쓰면 전역 변수처럼 함수를 빠져 나갔다 다시 들어 와도 값을 유지 한다.  
	int currtn_state;
	
	currtn_state = BUTTON_PIN & (1 << button_pin);   // 버튼을 읽는다. 
     134:	26 b3       	in	r18, 0x16	; 22
	if (currtn_state && button_status[button_num] == BUTTON_RELEASE)  // 버튼이 처음 눌려진 noise high 
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	02 c0       	rjmp	.+4      	; 0x140 <get_button+0xe>
     13c:	88 0f       	add	r24, r24
     13e:	99 1f       	adc	r25, r25
     140:	6a 95       	dec	r22
     142:	e2 f7       	brpl	.-8      	; 0x13c <get_button+0xa>
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	82 23       	and	r24, r18
     148:	93 23       	and	r25, r19
     14a:	89 2b       	or	r24, r25
     14c:	a9 f0       	breq	.+42     	; 0x178 <get_button+0x46>
     14e:	df 01       	movw	r26, r30
     150:	a8 56       	subi	r26, 0x68	; 104
     152:	bd 4f       	sbci	r27, 0xFD	; 253
     154:	8c 91       	ld	r24, X
     156:	81 11       	cpse	r24, r1
     158:	25 c0       	rjmp	.+74     	; 0x1a4 <get_button+0x72>
	{
		if (msec_count % 60 == 0)
     15a:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <msec_count>
     15e:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <msec_count+0x1>
     162:	6c e3       	ldi	r22, 0x3C	; 60
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	0e 94 c0 09 	call	0x1380	; 0x1380 <__divmodhi4>
     16a:	00 97       	sbiw	r24, 0x00	; 0
     16c:	f1 f4       	brne	.+60     	; 0x1aa <get_button+0x78>
		{
			button_status[button_num] = BUTTON_PRESS;   // noise가 지나간 상태의 High 상태 
     16e:	e8 56       	subi	r30, 0x68	; 104
     170:	fd 4f       	sbci	r31, 0xFD	; 253
     172:	21 e0       	ldi	r18, 0x01	; 1
     174:	20 83       	st	Z, r18
			return 0;   // 아직은 완전히 눌렸다 떼어진 상태가 아니다. 
     176:	08 95       	ret
		}
	}
	else if (currtn_state==BUTTON_RELEASE && button_status[button_num] == BUTTON_PRESS)
     178:	df 01       	movw	r26, r30
     17a:	a8 56       	subi	r26, 0x68	; 104
     17c:	bd 4f       	sbci	r27, 0xFD	; 253
     17e:	8c 91       	ld	r24, X
     180:	81 30       	cpi	r24, 0x01	; 1
     182:	b1 f4       	brne	.+44     	; 0x1b0 <get_button+0x7e>
	{
		if (msec_count % 60 == 0)
     184:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <msec_count>
     188:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <msec_count+0x1>
     18c:	6c e3       	ldi	r22, 0x3C	; 60
     18e:	70 e0       	ldi	r23, 0x00	; 0
     190:	0e 94 c0 09 	call	0x1380	; 0x1380 <__divmodhi4>
     194:	89 2b       	or	r24, r25
     196:	79 f4       	brne	.+30     	; 0x1b6 <get_button+0x84>
		{
			button_status[button_num] = BUTTON_RELEASE;   // 다음 버튼 체크를 위해서 초기화
     198:	e8 56       	subi	r30, 0x68	; 104
     19a:	fd 4f       	sbci	r31, 0xFD	; 253
     19c:	10 82       	st	Z, r1
			return 1;   // 완전히 1번 눌렸다 떼어진 상태로 인정	
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	08 95       	ret
		}	
	}
	return 0;   // 버튼이 open상태 
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	08 95       	ret
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	08 95       	ret
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	08 95       	ret
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	08 95       	ret

000001bc <init_buzzer>:
volatile uint8_t grandfa_idx = 0;

void init_buzzer(void)
{
	// PE3(OC3A)를 출력으로 설정
	BUZZER_DDR |= 1 << BUZZER_PIN;
     1bc:	13 9a       	sbi	0x02, 3	; 2
	
	TCCR3A = (1<<COM3A0); 
     1be:	80 e4       	ldi	r24, 0x40	; 64
     1c0:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = (1<<WGM32) | (1<<CS31);
     1c4:	8a e0       	ldi	r24, 0x0A	; 10
     1c6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	
	TCCR3C = 0;
     1ca:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
	OCR3A = 0;  
     1ce:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     1d2:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     1d6:	08 95       	ret

000001d8 <Beepo>:
}

void Beepo(void)
{
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
     1e0:	2c 97       	sbiw	r28, 0x0c	; 12
     1e2:	0f b6       	in	r0, 0x3f	; 63
     1e4:	f8 94       	cli
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	0f be       	out	0x3f, r0	; 63
     1ea:	cd bf       	out	0x3d, r28	; 61
	int Fire_Truck_Tune[] = {FA_01, LA_01_H,'\0'};
     1ec:	86 e0       	ldi	r24, 0x06	; 6
     1ee:	e4 e1       	ldi	r30, 0x14	; 20
     1f0:	f1 e0       	ldi	r31, 0x01	; 1
     1f2:	de 01       	movw	r26, r28
     1f4:	11 96       	adiw	r26, 0x01	; 1
     1f6:	01 90       	ld	r0, Z+
     1f8:	0d 92       	st	X+, r0
     1fa:	8a 95       	dec	r24
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <Beepo+0x1e>
	const int Fire_Truck_Beats[] = {BEAT_1_2, BEAT_1_2,'\0'};
     1fe:	86 e0       	ldi	r24, 0x06	; 6
     200:	ea e1       	ldi	r30, 0x1A	; 26
     202:	f1 e0       	ldi	r31, 0x01	; 1
     204:	de 01       	movw	r26, r28
     206:	17 96       	adiw	r26, 0x07	; 7
     208:	01 90       	ld	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	8a 95       	dec	r24
     20e:	e1 f7       	brne	.-8      	; 0x208 <Beepo+0x30>
	
	if (is_buzzer_playing == 0)  
     210:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <is_buzzer_playing>
     214:	81 11       	cpse	r24, r1
     216:	38 c0       	rjmp	.+112    	; 0x288 <Beepo+0xb0>
	{
		if (Fire_Truck_Beats[beepo_idx] == '\0')
     218:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <beepo_idx>
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	ee 0f       	add	r30, r30
     220:	ff 1f       	adc	r31, r31
     222:	ec 0f       	add	r30, r28
     224:	fd 1f       	adc	r31, r29
     226:	87 81       	ldd	r24, Z+7	; 0x07
     228:	90 85       	ldd	r25, Z+8	; 0x08
     22a:	89 2b       	or	r24, r25
     22c:	19 f4       	brne	.+6      	; 0x234 <Beepo+0x5c>
		{
			beepo_idx = 0;
     22e:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <beepo_idx>
			return;
     232:	2a c0       	rjmp	.+84     	; 0x288 <Beepo+0xb0>
		}
		OCR3A = Fire_Truck_Tune[beepo_idx];
     234:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <beepo_idx>
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	ee 0f       	add	r30, r30
     23c:	ff 1f       	adc	r31, r31
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	8c 0f       	add	r24, r28
     244:	9d 1f       	adc	r25, r29
     246:	e8 0f       	add	r30, r24
     248:	f9 1f       	adc	r31, r25
     24a:	80 81       	ld	r24, Z
     24c:	91 81       	ldd	r25, Z+1	; 0x01
     24e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     252:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		is_buzzer_playing = 1;
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <is_buzzer_playing>
		buzzer_delay = Fire_Truck_Beats[beepo_idx];
     25c:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <beepo_idx>
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	ee 0f       	add	r30, r30
     264:	ff 1f       	adc	r31, r31
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	8c 0f       	add	r24, r28
     26c:	9d 1f       	adc	r25, r29
     26e:	e8 0f       	add	r30, r24
     270:	f9 1f       	adc	r31, r25
     272:	86 81       	ldd	r24, Z+6	; 0x06
     274:	97 81       	ldd	r25, Z+7	; 0x07
     276:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <buzzer_delay+0x1>
     27a:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <buzzer_delay>
		beepo_idx++;
     27e:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <beepo_idx>
     282:	8f 5f       	subi	r24, 0xFF	; 255
     284:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <beepo_idx>
	}
	return;
}
     288:	2c 96       	adiw	r28, 0x0c	; 12
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	f8 94       	cli
     28e:	de bf       	out	0x3e, r29	; 62
     290:	0f be       	out	0x3f, r0	; 63
     292:	cd bf       	out	0x3d, r28	; 61
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <GrandFa>:

void GrandFa(void)
{
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	c4 54       	subi	r28, 0x44	; 68
     2a4:	d1 40       	sbci	r29, 0x01	; 1
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
	int GrandFa_Tune[] = {SO_01, DO_02, TI_01, DO_02, RE_02, DO_02, RE_02, MI_02, FA_02, MI_02, LA_01, RE_02, RE_02, DO_02, DO_02, DO_02, TI_01, LA_01, TI_01, DO_02, 0,
     2b0:	82 ea       	ldi	r24, 0xA2	; 162
     2b2:	e0 e2       	ldi	r30, 0x20	; 32
     2b4:	f1 e0       	ldi	r31, 0x01	; 1
     2b6:	de 01       	movw	r26, r28
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	01 90       	ld	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	8a 95       	dec	r24
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <GrandFa+0x20>
		SO_01, DO_02, TI_01, DO_02, RE_02, DO_02, RE_02, MI_02, FA_02, MI_02, LA_01, RE_02, RE_02, DO_02, DO_02, DO_02, TI_01, LA_01, TI_01, DO_02, 0,
		DO_02, MI_02, SO_02, MI_02, RE_02, DO_02, TI_01, DO_02, RE_02, DO_02, TI_01, LA_01, SO_01, DO_02, MI_02, SO_02, MI_02, RE_02, DO_02, TI_01, DO_02, RE_02,
	SO_01, DO_02, RE_02, MI_02, FA_02, MI_02, LA_01, RE_02, RE_02, DO_02, DO_02, DO_02, TI_01, LA_01, TI_01, DO_02, '/0'};

	const int GrandFa_Beats[] = {BEAT_1_4, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_2, BEAT_1_4,
     2c2:	82 ea       	ldi	r24, 0xA2	; 162
     2c4:	e2 ec       	ldi	r30, 0xC2	; 194
     2c6:	f1 e0       	ldi	r31, 0x01	; 1
     2c8:	de 01       	movw	r26, r28
     2ca:	ad 55       	subi	r26, 0x5D	; 93
     2cc:	bf 4f       	sbci	r27, 0xFF	; 255
     2ce:	01 90       	ld	r0, Z+
     2d0:	0d 92       	st	X+, r0
     2d2:	8a 95       	dec	r24
     2d4:	e1 f7       	brne	.-8      	; 0x2ce <GrandFa+0x34>
		BEAT_1_4, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_2, BEAT_1_4,
		BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4,
	BEAT_1_4, BEAT_1_2, BEAT_1_2, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_2, '\0'};
	
	if (is_buzzer_playing == 0)
     2d6:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <is_buzzer_playing>
     2da:	81 11       	cpse	r24, r1
     2dc:	38 c0       	rjmp	.+112    	; 0x34e <GrandFa+0xb4>
	{
		if (GrandFa_Beats[grandfa_idx] == '\0')
     2de:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <grandfa_idx>
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	ee 0f       	add	r30, r30
     2e6:	ff 1f       	adc	r31, r31
     2e8:	83 ea       	ldi	r24, 0xA3	; 163
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	8c 0f       	add	r24, r28
     2ee:	9d 1f       	adc	r25, r29
     2f0:	e8 0f       	add	r30, r24
     2f2:	f9 1f       	adc	r31, r25
     2f4:	80 81       	ld	r24, Z
     2f6:	91 81       	ldd	r25, Z+1	; 0x01
     2f8:	89 2b       	or	r24, r25
     2fa:	19 f4       	brne	.+6      	; 0x302 <GrandFa+0x68>
		{
			grandfa_idx = 0;
     2fc:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <grandfa_idx>
			return;
     300:	26 c0       	rjmp	.+76     	; 0x34e <GrandFa+0xb4>
		}
		OCR3A = GrandFa_Tune[grandfa_idx];
     302:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <grandfa_idx>
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	ec 0f       	add	r30, r28
     30e:	fd 1f       	adc	r31, r29
     310:	81 81       	ldd	r24, Z+1	; 0x01
     312:	92 81       	ldd	r25, Z+2	; 0x02
     314:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     318:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		is_buzzer_playing = 1;
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <is_buzzer_playing>
		buzzer_delay = GrandFa_Beats[grandfa_idx];
     322:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <grandfa_idx>
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	ee 0f       	add	r30, r30
     32a:	ff 1f       	adc	r31, r31
     32c:	83 ea       	ldi	r24, 0xA3	; 163
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	8c 0f       	add	r24, r28
     332:	9d 1f       	adc	r25, r29
     334:	e8 0f       	add	r30, r24
     336:	f9 1f       	adc	r31, r25
     338:	80 81       	ld	r24, Z
     33a:	91 81       	ldd	r25, Z+1	; 0x01
     33c:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <buzzer_delay+0x1>
     340:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <buzzer_delay>
		grandfa_idx++;
     344:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <grandfa_idx>
     348:	8f 5f       	subi	r24, 0xFF	; 255
     34a:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <grandfa_idx>
	}
	return;
}
     34e:	cc 5b       	subi	r28, 0xBC	; 188
     350:	de 4f       	sbci	r29, 0xFE	; 254
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <fnd_display>:

void init_fnd(void);
void fnd_display(int speed, int func_index);

void fnd_display(int speed, int func_index)
{		
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	2b 97       	sbiw	r28, 0x0b	; 11
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
     376:	ac 01       	movw	r20, r24
    uint8_t fnd_font[] = {~0xc0,~0xf9,~0xa4,~0xb0,~0x99,~0x92,~0x82,~0xd8,~0x80,~0x90,~0x7f};
     378:	9b e0       	ldi	r25, 0x0B	; 11
     37a:	e4 e6       	ldi	r30, 0x64	; 100
     37c:	f2 e0       	ldi	r31, 0x02	; 2
     37e:	de 01       	movw	r26, r28
     380:	11 96       	adiw	r26, 0x01	; 1
     382:	01 90       	ld	r0, Z+
     384:	0d 92       	st	X+, r0
     386:	9a 95       	dec	r25
     388:	e1 f7       	brne	.-8      	; 0x382 <fnd_display+0x20>
    
	FND_DIGIT_PORT |= (1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 | 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4);
     38a:	e5 e6       	ldi	r30, 0x65	; 101
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	90 81       	ld	r25, Z
     390:	9f 60       	ori	r25, 0x0F	; 15
     392:	90 83       	st	Z, r25
	
	static int digit_select=0; 
	
	switch(digit_select)
     394:	20 91 9b 02 	lds	r18, 0x029B	; 0x80029b <digit_select.1795>
     398:	30 91 9c 02 	lds	r19, 0x029C	; 0x80029c <digit_select.1795+0x1>
     39c:	21 30       	cpi	r18, 0x01	; 1
     39e:	31 05       	cpc	r19, r1
     3a0:	d1 f0       	breq	.+52     	; 0x3d6 <fnd_display+0x74>
     3a2:	1c f4       	brge	.+6      	; 0x3aa <fnd_display+0x48>
     3a4:	23 2b       	or	r18, r19
     3a6:	41 f0       	breq	.+16     	; 0x3b8 <fnd_display+0x56>
     3a8:	43 c0       	rjmp	.+134    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     3aa:	22 30       	cpi	r18, 0x02	; 2
     3ac:	31 05       	cpc	r19, r1
     3ae:	31 f1       	breq	.+76     	; 0x3fc <fnd_display+0x9a>
     3b0:	23 30       	cpi	r18, 0x03	; 3
     3b2:	31 05       	cpc	r19, r1
     3b4:	91 f1       	breq	.+100    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3b6:	3c c0       	rjmp	.+120    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		case 0:
			FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D4);  
     3b8:	e5 e6       	ldi	r30, 0x65	; 101
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	80 81       	ld	r24, Z
     3be:	8e 7f       	andi	r24, 0xFE	; 254
     3c0:	80 83       	st	Z, r24
			FND_DATA_PORT = fnd_font[speed % 10]; 
     3c2:	ca 01       	movw	r24, r20
     3c4:	6a e0       	ldi	r22, 0x0A	; 10
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	db d7       	rcall	.+4022   	; 0x1380 <__divmodhi4>
     3ca:	fe 01       	movw	r30, r28
     3cc:	e8 0f       	add	r30, r24
     3ce:	f9 1f       	adc	r31, r25
     3d0:	81 81       	ldd	r24, Z+1	; 0x01
     3d2:	85 bb       	out	0x15, r24	; 21
			break;
     3d4:	2d c0       	rjmp	.+90     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		case 1:
			FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D3);
     3d6:	e5 e6       	ldi	r30, 0x65	; 101
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	8d 7f       	andi	r24, 0xFD	; 253
     3de:	80 83       	st	Z, r24
			FND_DATA_PORT = fnd_font[speed / 10  %10];  
     3e0:	2a e0       	ldi	r18, 0x0A	; 10
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	ca 01       	movw	r24, r20
     3e6:	b9 01       	movw	r22, r18
     3e8:	cb d7       	rcall	.+3990   	; 0x1380 <__divmodhi4>
     3ea:	cb 01       	movw	r24, r22
     3ec:	b9 01       	movw	r22, r18
     3ee:	c8 d7       	rcall	.+3984   	; 0x1380 <__divmodhi4>
     3f0:	fe 01       	movw	r30, r28
     3f2:	e8 0f       	add	r30, r24
     3f4:	f9 1f       	adc	r31, r25
     3f6:	81 81       	ldd	r24, Z+1	; 0x01
     3f8:	85 bb       	out	0x15, r24	; 21
			break;
     3fa:	1a c0       	rjmp	.+52     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		case 2:
			FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D2); 
     3fc:	e5 e6       	ldi	r30, 0x65	; 101
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	80 81       	ld	r24, Z
     402:	8b 7f       	andi	r24, 0xFB	; 251
     404:	80 83       	st	Z, r24
			FND_DATA_PORT = fnd_font[speed / 100 ];  
     406:	ca 01       	movw	r24, r20
     408:	64 e6       	ldi	r22, 0x64	; 100
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	b9 d7       	rcall	.+3954   	; 0x1380 <__divmodhi4>
     40e:	fe 01       	movw	r30, r28
     410:	e6 0f       	add	r30, r22
     412:	f7 1f       	adc	r31, r23
     414:	81 81       	ldd	r24, Z+1	; 0x01
     416:	85 bb       	out	0x15, r24	; 21
			break;
     418:	0b c0       	rjmp	.+22     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		case 3:
			FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D1);
     41a:	e5 e6       	ldi	r30, 0x65	; 101
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	87 7f       	andi	r24, 0xF7	; 247
     422:	80 83       	st	Z, r24
			FND_DATA_PORT = func_index == MANUAL_MODE ? 0x6D : ~0x88;   
     424:	67 2b       	or	r22, r23
     426:	11 f0       	breq	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     428:	87 e7       	ldi	r24, 0x77	; 119
     42a:	01 c0       	rjmp	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	8d e6       	ldi	r24, 0x6D	; 109
     42e:	85 bb       	out	0x15, r24	; 21
			break;
	}
	digit_select++;
	digit_select %= 4;   // 다음 표시할 자리수 선택
     430:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <digit_select.1795>
     434:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <digit_select.1795+0x1>
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	83 70       	andi	r24, 0x03	; 3
     43c:	90 78       	andi	r25, 0x80	; 128
     43e:	99 23       	and	r25, r25
     440:	24 f4       	brge	.+8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	8c 6f       	ori	r24, 0xFC	; 252
     446:	9f 6f       	ori	r25, 0xFF	; 255
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <digit_select.1795+0x1>
     44e:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <digit_select.1795>
}
     452:	2b 96       	adiw	r28, 0x0b	; 11
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <init_fnd>:

void init_fnd(void)
{
	FND_DATA_DDR = 0xff;  // 출력 모드로 설정
     464:	8f ef       	ldi	r24, 0xFF	; 255
     466:	84 bb       	out	0x14, r24	; 20
	// FND_DIGIT_DDR |= 0xf0;   // 자릿수 선택 7654 
	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 | 1 << FND_DIGIT_D3 
     468:	e4 e6       	ldi	r30, 0x64	; 100
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	8f 60       	ori	r24, 0x0F	; 15
     470:	80 83       	st	Z, r24
					 | 1 << FND_DIGIT_D4; 
	FND_DATA_PORT = 0x00;   // fnd를 all off  
     472:	15 ba       	out	0x15, r1	; 21
     474:	08 95       	ret

00000476 <I2C_init>:
 */ 
#include <avr/io.h>
#include "I2C.h"

void I2C_init(unsigned int baud){
	TWBR = baud;
     476:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     47a:	08 95       	ret

0000047c <I2C_start>:
}

void I2C_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     47c:	84 ea       	ldi	r24, 0xA4	; 164
     47e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));  // 시작 완료 대기
     482:	e4 e7       	ldi	r30, 0x74	; 116
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	80 81       	ld	r24, Z
     488:	88 23       	and	r24, r24
     48a:	ec f7       	brge	.-6      	; 0x486 <I2C_start+0xa>
}
     48c:	08 95       	ret

0000048e <I2C_transmit>:

void I2C_transmit(uint8_t data)
{
	TWDR = data;
     48e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
     492:	84 e8       	ldi	r24, 0x84	; 132
     494:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
     498:	e4 e7       	ldi	r30, 0x74	; 116
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	88 23       	and	r24, r24
     4a0:	ec f7       	brge	.-6      	; 0x49c <I2C_transmit+0xe>
}
     4a2:	08 95       	ret

000004a4 <I2C_write_byte>:

void I2C_write_byte(uint8_t address, uint8_t data)
{
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	d8 2f       	mov	r29, r24
     4aa:	c6 2f       	mov	r28, r22
	I2C_start();
     4ac:	e7 df       	rcall	.-50     	; 0x47c <I2C_start>
	I2C_transmit(address);
     4ae:	8d 2f       	mov	r24, r29
     4b0:	ee df       	rcall	.-36     	; 0x48e <I2C_transmit>
	I2C_transmit(data);
     4b2:	8c 2f       	mov	r24, r28
     4b4:	ec df       	rcall	.-40     	; 0x48e <I2C_transmit>
     4b6:	84 e9       	ldi	r24, 0x94	; 148
	I2C_stop();
}

void I2C_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     4b8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     4bc:	df 91       	pop	r29
{
	I2C_start();
	I2C_transmit(address);
	I2C_transmit(data);
	I2C_stop();
}
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <I2C_LCD_write_data>:
     4c2:	ef 92       	push	r14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <I2C_LCD_write_data+0xe>
     4d0:	00 d0       	rcall	.+0      	; 0x4d2 <I2C_LCD_write_data+0x10>
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	28 2f       	mov	r18, r24
     4d8:	20 7f       	andi	r18, 0xF0	; 240
     4da:	30 e1       	ldi	r19, 0x10	; 16
     4dc:	83 9f       	mul	r24, r19
     4de:	c0 01       	movw	r24, r0
     4e0:	11 24       	eor	r1, r1
     4e2:	92 2f       	mov	r25, r18
     4e4:	9d 60       	ori	r25, 0x0D	; 13
     4e6:	99 83       	std	Y+1, r25	; 0x01
     4e8:	29 60       	ori	r18, 0x09	; 9
     4ea:	2a 83       	std	Y+2, r18	; 0x02
     4ec:	98 2f       	mov	r25, r24
     4ee:	9d 60       	ori	r25, 0x0D	; 13
     4f0:	9b 83       	std	Y+3, r25	; 0x03
     4f2:	89 60       	ori	r24, 0x09	; 9
     4f4:	8c 83       	std	Y+4, r24	; 0x04
     4f6:	8e 01       	movw	r16, r28
     4f8:	0f 5f       	subi	r16, 0xFF	; 255
     4fa:	1f 4f       	sbci	r17, 0xFF	; 255
     4fc:	7e 01       	movw	r14, r28
     4fe:	85 e0       	ldi	r24, 0x05	; 5
     500:	e8 0e       	add	r14, r24
     502:	f1 1c       	adc	r15, r1
     504:	f8 01       	movw	r30, r16
     506:	61 91       	ld	r22, Z+
     508:	8f 01       	movw	r16, r30
     50a:	8e e4       	ldi	r24, 0x4E	; 78
     50c:	cb df       	rcall	.-106    	; 0x4a4 <I2C_write_byte>
     50e:	0e 15       	cp	r16, r14
     510:	1f 05       	cpc	r17, r15
     512:	c1 f7       	brne	.-16     	; 0x504 <I2C_LCD_write_data+0x42>
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	ff 90       	pop	r15
     526:	ef 90       	pop	r14
     528:	08 95       	ret

0000052a <I2C_LCD_write_command>:
     52a:	ef 92       	push	r14
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	00 d0       	rcall	.+0      	; 0x538 <I2C_LCD_write_command+0xe>
     538:	00 d0       	rcall	.+0      	; 0x53a <I2C_LCD_write_command+0x10>
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	28 2f       	mov	r18, r24
     540:	20 7f       	andi	r18, 0xF0	; 240
     542:	30 e1       	ldi	r19, 0x10	; 16
     544:	83 9f       	mul	r24, r19
     546:	c0 01       	movw	r24, r0
     548:	11 24       	eor	r1, r1
     54a:	92 2f       	mov	r25, r18
     54c:	9c 60       	ori	r25, 0x0C	; 12
     54e:	99 83       	std	Y+1, r25	; 0x01
     550:	28 60       	ori	r18, 0x08	; 8
     552:	2a 83       	std	Y+2, r18	; 0x02
     554:	98 2f       	mov	r25, r24
     556:	9c 60       	ori	r25, 0x0C	; 12
     558:	9b 83       	std	Y+3, r25	; 0x03
     55a:	88 60       	ori	r24, 0x08	; 8
     55c:	8c 83       	std	Y+4, r24	; 0x04
     55e:	8e 01       	movw	r16, r28
     560:	0f 5f       	subi	r16, 0xFF	; 255
     562:	1f 4f       	sbci	r17, 0xFF	; 255
     564:	7e 01       	movw	r14, r28
     566:	85 e0       	ldi	r24, 0x05	; 5
     568:	e8 0e       	add	r14, r24
     56a:	f1 1c       	adc	r15, r1
     56c:	f8 01       	movw	r30, r16
     56e:	61 91       	ld	r22, Z+
     570:	8f 01       	movw	r16, r30
     572:	8e e4       	ldi	r24, 0x4E	; 78
     574:	97 df       	rcall	.-210    	; 0x4a4 <I2C_write_byte>
     576:	0e 15       	cp	r16, r14
     578:	1f 05       	cpc	r17, r15
     57a:	c1 f7       	brne	.-16     	; 0x56c <I2C_LCD_write_command+0x42>
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	08 95       	ret

00000592 <I2C_LCD_init>:
}

// LCD를 초기화
void I2C_LCD_init(void)
{
	I2C_init(10000);
     592:	80 e1       	ldi	r24, 0x10	; 16
     594:	97 e2       	ldi	r25, 0x27	; 39
     596:	6f df       	rcall	.-290    	; 0x476 <I2C_init>
     598:	2f ef       	ldi	r18, 0xFF	; 255
     59a:	80 e7       	ldi	r24, 0x70	; 112
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	21 50       	subi	r18, 0x01	; 1
     5a0:	80 40       	sbci	r24, 0x00	; 0
     5a2:	90 40       	sbci	r25, 0x00	; 0
     5a4:	e1 f7       	brne	.-8      	; 0x59e <I2C_LCD_init+0xc>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <I2C_LCD_init+0x16>
     5a8:	00 00       	nop
	_delay_ms(50);
	//Initialization of HD44780-based LCD (4-bit HW)
	I2C_LCD_write_command(0x33);
     5aa:	83 e3       	ldi	r24, 0x33	; 51
     5ac:	be df       	rcall	.-132    	; 0x52a <I2C_LCD_write_command>
	I2C_LCD_write_command(0x32);
     5ae:	82 e3       	ldi	r24, 0x32	; 50
     5b0:	bc df       	rcall	.-136    	; 0x52a <I2C_LCD_write_command>
	I2C_LCD_write_command(0x28);   //Function Set 4-bit mode
     5b2:	88 e2       	ldi	r24, 0x28	; 40
     5b4:	ba df       	rcall	.-140    	; 0x52a <I2C_LCD_write_command>
	I2C_LCD_write_command(0x0c);   //Display On/Off Control
     5b6:	8c e0       	ldi	r24, 0x0C	; 12
     5b8:	b8 df       	rcall	.-144    	; 0x52a <I2C_LCD_write_command>
	I2C_LCD_write_command(0x06);   //Entry mode set
     5ba:	86 e0       	ldi	r24, 0x06	; 6
     5bc:	b6 df       	rcall	.-148    	; 0x52a <I2C_LCD_write_command>
     5be:	81 e0       	ldi	r24, 0x01	; 1
	I2C_LCD_write_command(0x01);   //Clear Display
     5c0:	b4 df       	rcall	.-152    	; 0x52a <I2C_LCD_write_command>
     5c2:	8f e3       	ldi	r24, 0x3F	; 63
     5c4:	9c e9       	ldi	r25, 0x9C	; 156
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <I2C_LCD_init+0x34>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <I2C_LCD_init+0x3a>
     5cc:	00 00       	nop
     5ce:	08 95       	ret

000005d0 <I2C_LCD_write_string>:
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
	//Minimum delay to wait before driving LCD module
	_delay_ms(10);
}
// 현재의 xy좌표에 printf처럼 스트링 값을 출력 
void I2C_LCD_write_string(char *string)
{
     5d4:	cf 93       	push	r28
     5d6:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0; string[i]; i++) //"hello !!\0" 마지막 널문자에서 조건 거짓이 되어 빠져나온다.
     5d8:	80 81       	ld	r24, Z
     5da:	88 23       	and	r24, r24
     5dc:	51 f0       	breq	.+20     	; 0x5f2 <I2C_LCD_write_string+0x22>
     5de:	8f 01       	movw	r16, r30
     5e0:	c0 e0       	ldi	r28, 0x00	; 0
	I2C_LCD_write_data(string[i]);
     5e2:	6f df       	rcall	.-290    	; 0x4c2 <I2C_LCD_write_data>
}
// 현재의 xy좌표에 printf처럼 스트링 값을 출력 
void I2C_LCD_write_string(char *string)
{
	uint8_t i;
	for(i=0; string[i]; i++) //"hello !!\0" 마지막 널문자에서 조건 거짓이 되어 빠져나온다.
     5e4:	cf 5f       	subi	r28, 0xFF	; 255
     5e6:	f8 01       	movw	r30, r16
     5e8:	ec 0f       	add	r30, r28
     5ea:	f1 1d       	adc	r31, r1
     5ec:	80 81       	ld	r24, Z
     5ee:	81 11       	cpse	r24, r1
     5f0:	f8 cf       	rjmp	.-16     	; 0x5e2 <I2C_LCD_write_string+0x12>
	I2C_LCD_write_data(string[i]);
}
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	08 95       	ret

000005fa <I2C_LCD_goto_XY>:
	row %= 2;
	
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	I2C_LCD_write_command(command);
     5fa:	81 70       	andi	r24, 0x01	; 1
     5fc:	6f 70       	andi	r22, 0x0F	; 15
     5fe:	90 e4       	ldi	r25, 0x40	; 64
     600:	89 9f       	mul	r24, r25
     602:	60 0d       	add	r22, r0
     604:	11 24       	eor	r1, r1
     606:	86 2f       	mov	r24, r22
     608:	80 58       	subi	r24, 0x80	; 128
     60a:	8f cf       	rjmp	.-226    	; 0x52a <I2C_LCD_write_command>
     60c:	08 95       	ret

0000060e <I2C_LCD_write_string_XY>:
}

// x,y좌표로 이동을 하고 string값을 출력 한다. 
void I2C_LCD_write_string_XY(uint8_t row, uint8_t col, char *string)
{
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	ea 01       	movw	r28, r20
	I2C_LCD_goto_XY(row, col);
     614:	f2 df       	rcall	.-28     	; 0x5fa <I2C_LCD_goto_XY>
	I2C_LCD_write_string(string);
     616:	ce 01       	movw	r24, r28
     618:	db df       	rcall	.-74     	; 0x5d0 <I2C_LCD_write_string>
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <LCD_display>:

#define SLA_W (0x27<<1) //I2C LCD주소는 0x27 인데, <<1로 하는 이유는 write 모드를 유지하기 위함.


void LCD_display(int total_distance, int func_index)
{
     620:	8f 92       	push	r8
     622:	9f 92       	push	r9
     624:	af 92       	push	r10
     626:	bf 92       	push	r11
     628:	cf 92       	push	r12
     62a:	df 92       	push	r13
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	c6 55       	subi	r28, 0x56	; 86
     63e:	d1 09       	sbc	r29, r1
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
	char *mode = (func_index == 0) ? "SELF" : "AUTO";
     64a:	67 2b       	or	r22, r23
     64c:	19 f0       	breq	.+6      	; 0x654 <LCD_display+0x34>
     64e:	2a e7       	ldi	r18, 0x7A	; 122
     650:	32 e0       	ldi	r19, 0x02	; 2
     652:	02 c0       	rjmp	.+4      	; 0x658 <LCD_display+0x38>
     654:	25 e7       	ldi	r18, 0x75	; 117
     656:	32 e0       	ldi	r19, 0x02	; 2
	char mode_and_distance_display[20];
	char ultrasonic_dis_char[3][20];
	int positions[] = {1, 6, 11}; 
     658:	46 e0       	ldi	r20, 0x06	; 6
     65a:	ef e6       	ldi	r30, 0x6F	; 111
     65c:	f2 e0       	ldi	r31, 0x02	; 2
     65e:	de 01       	movw	r26, r28
     660:	af 5a       	subi	r26, 0xAF	; 175
     662:	bf 4f       	sbci	r27, 0xFF	; 255
     664:	01 90       	ld	r0, Z+
     666:	0d 92       	st	X+, r0
     668:	4a 95       	dec	r20
     66a:	e1 f7       	brne	.-8      	; 0x664 <LCD_display+0x44>

	sprintf(mode_and_distance_display, "%s total:%dcm", mode, total_distance);
     66c:	9f 93       	push	r25
     66e:	8f 93       	push	r24
     670:	3f 93       	push	r19
     672:	2f 93       	push	r18
     674:	8f e7       	ldi	r24, 0x7F	; 127
     676:	92 e0       	ldi	r25, 0x02	; 2
     678:	9f 93       	push	r25
     67a:	8f 93       	push	r24
     67c:	8e 01       	movw	r16, r28
     67e:	0f 5f       	subi	r16, 0xFF	; 255
     680:	1f 4f       	sbci	r17, 0xFF	; 255
     682:	1f 93       	push	r17
     684:	0f 93       	push	r16
     686:	98 d6       	rcall	.+3376   	; 0x13b8 <sprintf>
	I2C_LCD_write_string_XY(0, 0, mode_and_distance_display);
     688:	a8 01       	movw	r20, r16
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	bf df       	rcall	.-130    	; 0x60e <I2C_LCD_write_string_XY>
     690:	0f 2e       	mov	r0, r31
     692:	fd e8       	ldi	r31, 0x8D	; 141
     694:	8f 2e       	mov	r8, r31
     696:	f2 e0       	ldi	r31, 0x02	; 2
     698:	9f 2e       	mov	r9, r31
     69a:	f0 2d       	mov	r31, r0
     69c:	0c 5e       	subi	r16, 0xEC	; 236
     69e:	1f 4f       	sbci	r17, 0xFF	; 255
     6a0:	ce 01       	movw	r24, r28
     6a2:	8f 5a       	subi	r24, 0xAF	; 175
     6a4:	9f 4f       	sbci	r25, 0xFF	; 255
     6a6:	6c 01       	movw	r12, r24
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61

	for (int i = 0; i < 3; i++) {
     6b2:	e1 2c       	mov	r14, r1
     6b4:	f1 2c       	mov	r15, r1
		sprintf(ultrasonic_dis_char[i], "%c%d ", "LMR"[i], ultrasonic_dis[i]);
     6b6:	0f 2e       	mov	r0, r31
     6b8:	f1 e9       	ldi	r31, 0x91	; 145
     6ba:	af 2e       	mov	r10, r31
     6bc:	f2 e0       	ldi	r31, 0x02	; 2
     6be:	bf 2e       	mov	r11, r31
     6c0:	f0 2d       	mov	r31, r0
     6c2:	f7 01       	movw	r30, r14
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	eb 54       	subi	r30, 0x4B	; 75
     6ca:	fd 4f       	sbci	r31, 0xFD	; 253
     6cc:	80 81       	ld	r24, Z
     6ce:	91 81       	ldd	r25, Z+1	; 0x01
     6d0:	f4 01       	movw	r30, r8
     6d2:	21 91       	ld	r18, Z+
     6d4:	4f 01       	movw	r8, r30
     6d6:	9f 93       	push	r25
     6d8:	8f 93       	push	r24
     6da:	1f 92       	push	r1
     6dc:	2f 93       	push	r18
     6de:	bf 92       	push	r11
     6e0:	af 92       	push	r10
     6e2:	1f 93       	push	r17
     6e4:	0f 93       	push	r16
     6e6:	68 d6       	rcall	.+3280   	; 0x13b8 <sprintf>
		I2C_LCD_write_string_XY(1, positions[i], ultrasonic_dis_char[i]);
     6e8:	f6 01       	movw	r30, r12
     6ea:	60 81       	ld	r22, Z
     6ec:	f2 e0       	ldi	r31, 0x02	; 2
     6ee:	cf 0e       	add	r12, r31
     6f0:	d1 1c       	adc	r13, r1
     6f2:	40 2f       	mov	r20, r16
     6f4:	51 2f       	mov	r21, r17
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	8a df       	rcall	.-236    	; 0x60e <I2C_LCD_write_string_XY>
	int positions[] = {1, 6, 11}; 

	sprintf(mode_and_distance_display, "%s total:%dcm", mode, total_distance);
	I2C_LCD_write_string_XY(0, 0, mode_and_distance_display);

	for (int i = 0; i < 3; i++) {
     6fa:	8f ef       	ldi	r24, 0xFF	; 255
     6fc:	e8 1a       	sub	r14, r24
     6fe:	f8 0a       	sbc	r15, r24
     700:	0c 5e       	subi	r16, 0xEC	; 236
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	f8 94       	cli
     708:	de bf       	out	0x3e, r29	; 62
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	cd bf       	out	0x3d, r28	; 61
     70e:	f3 e0       	ldi	r31, 0x03	; 3
     710:	ef 16       	cp	r14, r31
     712:	f1 04       	cpc	r15, r1
     714:	b1 f6       	brne	.-84     	; 0x6c2 <LCD_display+0xa2>
		sprintf(ultrasonic_dis_char[i], "%c%d ", "LMR"[i], ultrasonic_dis[i]);
		I2C_LCD_write_string_XY(1, positions[i], ultrasonic_dis_char[i]);
	}
}
     716:	ca 5a       	subi	r28, 0xAA	; 170
     718:	df 4f       	sbci	r29, 0xFF	; 255
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	bf 90       	pop	r11
     736:	af 90       	pop	r10
     738:	9f 90       	pop	r9
     73a:	8f 90       	pop	r8
     73c:	08 95       	ret

0000073e <init_led>:

void init_led(void);

void init_led(void)
{
	AUTO_RUN_LED_PORT_DDR |= 1 << AUTO_RUN_LED_PIN;
     73e:	e4 e6       	ldi	r30, 0x64	; 100
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	80 81       	ld	r24, Z
     744:	80 61       	ori	r24, 0x10	; 16
     746:	80 83       	st	Z, r24
	AUTO_RUN_LED_PORT &= ~(1 << AUTO_RUN_LED_PIN);
     748:	e5 e6       	ldi	r30, 0x65	; 101
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	8f 7e       	andi	r24, 0xEF	; 239
     750:	80 83       	st	Z, r24
     752:	08 95       	ret

00000754 <manual_mode>:
	TIMSK |= 1 << TOIE0;  
}

void manual_mode(void)      
{
	if(get_button(BUTTON0,BUTTON0PIN))
     754:	67 e0       	ldi	r22, 0x07	; 7
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	ea dc       	rcall	.-1580   	; 0x132 <get_button>
     75e:	89 2b       	or	r24, r25
     760:	49 f0       	breq	.+18     	; 0x774 <manual_mode+0x20>
	{
		init_L298N();
     762:	49 d2       	rcall	.+1170   	; 0xbf6 <init_L298N>
		init_fnd();
     764:	7f de       	rcall	.-770    	; 0x464 <init_fnd>
     766:	eb df       	rcall	.-42     	; 0x73e <init_led>
		init_led();
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
		func_index = AUTO_MODE_FIRE_ENGINE; 
     76c:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <func_index+0x1>
     770:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <func_index>
     774:	e0 91 b4 02 	lds	r30, 0x02B4	; 0x8002b4 <bt_data>
	}
	switch(bt_data)
     778:	8e 2f       	mov	r24, r30
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	fc 01       	movw	r30, r24
     77e:	e2 54       	subi	r30, 0x42	; 66
     780:	f1 09       	sbc	r31, r1
     782:	e2 33       	cpi	r30, 0x32	; 50
     784:	f1 05       	cpc	r31, r1
     786:	a0 f4       	brcc	.+40     	; 0x7b0 <manual_mode+0x5c>
     788:	ea 5b       	subi	r30, 0xBA	; 186
     78a:	ff 4f       	sbci	r31, 0xFF	; 255
     78c:	0c c6       	rjmp	.+3096   	; 0x13a6 <__tablejump2__>
     78e:	84 ef       	ldi	r24, 0xF4	; 244
	{
		case 'F' :
		case 'f' :
			forward(500); //4us x 500 = 0.002sec (2ms)
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	4f d2       	rcall	.+1182   	; 0xc32 <forward>
     794:	0d c0       	rjmp	.+26     	; 0x7b0 <manual_mode+0x5c>
			break;
     796:	84 ef       	ldi	r24, 0xF4	; 244
		case 'B' :
		case 'b' :
			backward(500); //4us x 500 = 0.002sec (2ms)
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	59 d2       	rcall	.+1202   	; 0xc4e <backward>
     79c:	09 c0       	rjmp	.+18     	; 0x7b0 <manual_mode+0x5c>
			break;
		case 'L' :
		case 'l' :
			turn_left(700);
     79e:	8c eb       	ldi	r24, 0xBC	; 188
     7a0:	92 e0       	ldi	r25, 0x02	; 2
     7a2:	63 d2       	rcall	.+1222   	; 0xc6a <turn_left>
			break;
     7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <manual_mode+0x5c>
		case 'R' :
		case 'r' :
			turn_right(700);
     7a6:	8c eb       	ldi	r24, 0xBC	; 188
     7a8:	92 e0       	ldi	r25, 0x02	; 2
     7aa:	6d d2       	rcall	.+1242   	; 0xc86 <turn_right>
     7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <manual_mode+0x5c>
			break;
     7ae:	34 d2       	rcall	.+1128   	; 0xc18 <stop>
		case 'S' :
		case 's' :
			stop();
     7b0:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <fnd_clk>
			break;
		default:
			break;	
	}
	if(fnd_clk)
     7b4:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <fnd_clk+0x1>
     7b8:	89 2b       	or	r24, r25
     7ba:	91 f0       	breq	.+36     	; 0x7e0 <manual_mode+0x8c>
     7bc:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <fnd_clk+0x1>
	{
		fnd_clk = 0;
     7c0:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <fnd_clk>
     7c4:	60 91 a3 02 	lds	r22, 0x02A3	; 0x8002a3 <func_index>
		fnd_display(OCR1A > 0 ? OCR1A : OCR1B, func_index);
     7c8:	70 91 a4 02 	lds	r23, 0x02A4	; 0x8002a4 <func_index+0x1>
     7cc:	8a b5       	in	r24, 0x2a	; 42
     7ce:	9b b5       	in	r25, 0x2b	; 43
     7d0:	89 2b       	or	r24, r25
     7d2:	19 f0       	breq	.+6      	; 0x7da <manual_mode+0x86>
     7d4:	8a b5       	in	r24, 0x2a	; 42
     7d6:	9b b5       	in	r25, 0x2b	; 43
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <manual_mode+0x8a>
     7da:	88 b5       	in	r24, 0x28	; 40
     7dc:	99 b5       	in	r25, 0x29	; 41
     7de:	c1 cd       	rjmp	.-1150   	; 0x362 <fnd_display>
     7e0:	08 95       	ret

000007e2 <__vector_16>:
     7e2:	1f 92       	push	r1
     7e4:	0f 92       	push	r0
	auto_mode_fire_engine,   
	auto_mode_daycare_car
};

ISR(TIMER0_OVF_vect)
{
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	0f 92       	push	r0
     7ea:	11 24       	eor	r1, r1
     7ec:	2f 93       	push	r18
     7ee:	3f 93       	push	r19
     7f0:	8f 93       	push	r24
     7f2:	9f 93       	push	r25
	TCNT0 = 6;
     7f4:	86 e0       	ldi	r24, 0x06	; 6
     7f6:	82 bf       	out	0x32, r24	; 50
	fnd_clk = 1;
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <fnd_clk+0x1>
     800:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <fnd_clk>
	msec_count++;
     804:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <msec_count>
     808:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <msec_count+0x1>
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <msec_count+0x1>
     812:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <msec_count>
	ultrasonic_check_timer++;
     816:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <ultrasonic_check_timer>
     81a:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <ultrasonic_check_timer+0x1>
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <ultrasonic_check_timer+0x1>
     824:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <ultrasonic_check_timer>
	led_counter++;
     828:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <led_counter>
     82c:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <led_counter+0x1>
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <led_counter+0x1>
     836:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <led_counter>

	if (is_buzzer_playing)
     83a:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <is_buzzer_playing>
     83e:	88 23       	and	r24, r24
     840:	11 f1       	breq	.+68     	; 0x886 <__vector_16+0xa4>
	{
		buzzer_msec++;
     842:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <buzzer_msec>
     846:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <buzzer_msec+0x1>
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <buzzer_msec+0x1>
     850:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <buzzer_msec>
		if (buzzer_msec == buzzer_delay)
     854:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <buzzer_msec>
     858:	30 91 a7 02 	lds	r19, 0x02A7	; 0x8002a7 <buzzer_msec+0x1>
     85c:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <buzzer_delay>
     860:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <buzzer_delay+0x1>
     864:	28 17       	cp	r18, r24
     866:	39 07       	cpc	r19, r25
     868:	71 f4       	brne	.+28     	; 0x886 <__vector_16+0xa4>
		{
			is_buzzer_playing = 0;
     86a:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <is_buzzer_playing>
			buzzer_msec = 0;
     86e:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <buzzer_msec+0x1>
     872:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <buzzer_msec>
			buzzer_delay = 0;
     876:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <buzzer_delay+0x1>
     87a:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <buzzer_delay>
			OCR3A = 0;
     87e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     882:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		}
	}
}
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	3f 91       	pop	r19
     88c:	2f 91       	pop	r18
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <init_timer0>:
	}
}

void init_timer0(void)
{
	TCNT0 = 6;  
     898:	86 e0       	ldi	r24, 0x06	; 6
     89a:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00; 
     89c:	83 b7       	in	r24, 0x33	; 51
     89e:	84 60       	ori	r24, 0x04	; 4
     8a0:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;  
     8a2:	87 b7       	in	r24, 0x37	; 55
     8a4:	81 60       	ori	r24, 0x01	; 1
     8a6:	87 bf       	out	0x37, r24	; 55
     8a8:	08 95       	ret

000008aa <auto_algo>:
}


void auto_algo(void)
{
	if(ultrasonic_dis[1] > 27)
     8aa:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <ultrasonic_dis+0x2>
     8ae:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <ultrasonic_dis+0x3>
     8b2:	4c 97       	sbiw	r24, 0x1c	; 28
     8b4:	a4 f1       	brlt	.+104    	; 0x91e <auto_algo+0x74>
	{
		if (ultrasonic_dis[0] > 20 && ultrasonic_dis[2] > 20)
     8b6:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <ultrasonic_dis>
     8ba:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <ultrasonic_dis+0x1>
     8be:	45 97       	sbiw	r24, 0x15	; 21
     8c0:	54 f0       	brlt	.+20     	; 0x8d6 <auto_algo+0x2c>
     8c2:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <ultrasonic_dis+0x4>
     8c6:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <ultrasonic_dis+0x5>
     8ca:	45 97       	sbiw	r24, 0x15	; 21
     8cc:	24 f0       	brlt	.+8      	; 0x8d6 <auto_algo+0x2c>
		{
			forward(700);
     8ce:	8c eb       	ldi	r24, 0xBC	; 188
     8d0:	92 e0       	ldi	r25, 0x02	; 2
     8d2:	af c1       	rjmp	.+862    	; 0xc32 <forward>
     8d4:	08 95       	ret
		}
		else if (ultrasonic_dis[0] <= 20 && ultrasonic_dis[2] > 20)
     8d6:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <ultrasonic_dis>
     8da:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <ultrasonic_dis+0x1>
     8de:	45 97       	sbiw	r24, 0x15	; 21
     8e0:	54 f4       	brge	.+20     	; 0x8f6 <auto_algo+0x4c>
     8e2:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <ultrasonic_dis+0x4>
     8e6:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <ultrasonic_dis+0x5>
     8ea:	45 97       	sbiw	r24, 0x15	; 21
     8ec:	24 f0       	brlt	.+8      	; 0x8f6 <auto_algo+0x4c>
		{
			turn_right(900);
     8ee:	84 e8       	ldi	r24, 0x84	; 132
     8f0:	93 e0       	ldi	r25, 0x03	; 3
     8f2:	c9 c1       	rjmp	.+914    	; 0xc86 <turn_right>
     8f4:	08 95       	ret
		}
		else if (ultrasonic_dis[0] > 20 && ultrasonic_dis[2] <= 20)
     8f6:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <ultrasonic_dis>
     8fa:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <ultrasonic_dis+0x1>
     8fe:	45 97       	sbiw	r24, 0x15	; 21
     900:	54 f0       	brlt	.+20     	; 0x916 <auto_algo+0x6c>
     902:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <ultrasonic_dis+0x4>
     906:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <ultrasonic_dis+0x5>
     90a:	45 97       	sbiw	r24, 0x15	; 21
     90c:	24 f4       	brge	.+8      	; 0x916 <auto_algo+0x6c>
		{
			turn_left(900);
     90e:	84 e8       	ldi	r24, 0x84	; 132
     910:	93 e0       	ldi	r25, 0x03	; 3
     912:	ab c1       	rjmp	.+854    	; 0xc6a <turn_left>
     914:	08 95       	ret
		}
		else
		{
			backward(600);
     916:	88 e5       	ldi	r24, 0x58	; 88
     918:	92 e0       	ldi	r25, 0x02	; 2
     91a:	99 c1       	rjmp	.+818    	; 0xc4e <backward>
     91c:	08 95       	ret
     91e:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <ultrasonic_dis+0x2>
		}
	}
	else if (ultrasonic_dis[1] <= 27 && ultrasonic_dis[1] >= 10)
     922:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <ultrasonic_dis+0x3>
     926:	4c 97       	sbiw	r24, 0x1c	; 28
     928:	bc f5       	brge	.+110    	; 0x998 <auto_algo+0xee>
     92a:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <ultrasonic_dis+0x2>
     92e:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <ultrasonic_dis+0x3>
     932:	0a 97       	sbiw	r24, 0x0a	; 10
     934:	8c f1       	brlt	.+98     	; 0x998 <auto_algo+0xee>
     936:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <ultrasonic_dis>
	{
		if (ultrasonic_dis[0] <= 20 && ultrasonic_dis[2] > 20)
     93a:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <ultrasonic_dis+0x1>
     93e:	45 97       	sbiw	r24, 0x15	; 21
     940:	54 f4       	brge	.+20     	; 0x956 <auto_algo+0xac>
     942:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <ultrasonic_dis+0x4>
     946:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <ultrasonic_dis+0x5>
     94a:	45 97       	sbiw	r24, 0x15	; 21
     94c:	24 f0       	brlt	.+8      	; 0x956 <auto_algo+0xac>
		{
			turn_right(900);
     94e:	84 e8       	ldi	r24, 0x84	; 132
     950:	93 e0       	ldi	r25, 0x03	; 3
     952:	99 c1       	rjmp	.+818    	; 0xc86 <turn_right>
     954:	08 95       	ret
     956:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <ultrasonic_dis>
		}
		else if (ultrasonic_dis[0] > 20 && ultrasonic_dis[2] <= 20)
     95a:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <ultrasonic_dis+0x1>
     95e:	45 97       	sbiw	r24, 0x15	; 21
     960:	54 f0       	brlt	.+20     	; 0x976 <auto_algo+0xcc>
     962:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <ultrasonic_dis+0x4>
     966:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <ultrasonic_dis+0x5>
     96a:	45 97       	sbiw	r24, 0x15	; 21
     96c:	24 f4       	brge	.+8      	; 0x976 <auto_algo+0xcc>
		{
			turn_left(900);
     96e:	84 e8       	ldi	r24, 0x84	; 132
     970:	93 e0       	ldi	r25, 0x03	; 3
     972:	7b c1       	rjmp	.+758    	; 0xc6a <turn_left>
     974:	08 95       	ret
     976:	e5 eb       	ldi	r30, 0xB5	; 181
		}
		else if(ultrasonic_dis[0] > ultrasonic_dis[2])      // 중앙은 10~20인데 좌우가 20이하일떄
     978:	f2 e0       	ldi	r31, 0x02	; 2
     97a:	20 81       	ld	r18, Z
     97c:	31 81       	ldd	r19, Z+1	; 0x01
     97e:	84 81       	ldd	r24, Z+4	; 0x04
     980:	95 81       	ldd	r25, Z+5	; 0x05
     982:	82 17       	cp	r24, r18
     984:	93 07       	cpc	r25, r19
     986:	24 f4       	brge	.+8      	; 0x990 <auto_algo+0xe6>
		{
			turn_left(900);
     988:	84 e8       	ldi	r24, 0x84	; 132
     98a:	93 e0       	ldi	r25, 0x03	; 3
     98c:	6e c1       	rjmp	.+732    	; 0xc6a <turn_left>
     98e:	08 95       	ret
		}
		else
		{
			turn_right(900); 
     990:	84 e8       	ldi	r24, 0x84	; 132
     992:	93 e0       	ldi	r25, 0x03	; 3
     994:	78 c1       	rjmp	.+752    	; 0xc86 <turn_right>
     996:	08 95       	ret
     998:	88 e5       	ldi	r24, 0x58	; 88
		}
	}
	else
	{
		backward(600);
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	58 c1       	rjmp	.+688    	; 0xc4e <backward>
     99e:	08 95       	ret

000009a0 <update_sec>:
     9a0:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <msec_count>
	}
}

void update_sec(void)
{
	if(msec_count >= 200)
     9a4:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <msec_count+0x1>
     9a8:	88 3c       	cpi	r24, 0xC8	; 200
     9aa:	91 05       	cpc	r25, r1
     9ac:	74 f1       	brlt	.+92     	; 0xa0a <update_sec+0x6a>
	{
		msec_count = 0;
     9ae:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <msec_count+0x1>
     9b2:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <msec_count>
		if(OCR1A!=0 || OCR1B!=0)
     9b6:	8a b5       	in	r24, 0x2a	; 42
     9b8:	9b b5       	in	r25, 0x2b	; 43
     9ba:	89 2b       	or	r24, r25
     9bc:	21 f4       	brne	.+8      	; 0x9c6 <update_sec+0x26>
     9be:	88 b5       	in	r24, 0x28	; 40
     9c0:	99 b5       	in	r25, 0x29	; 41
     9c2:	89 2b       	or	r24, r25
     9c4:	c9 f0       	breq	.+50     	; 0x9f8 <update_sec+0x58>
		{
			total_distance = total_distance + ((OCR1A > 0 ? OCR1A : OCR1B) / 70 / 5); // 1초에 40cm 이동
     9c6:	8a b5       	in	r24, 0x2a	; 42
     9c8:	9b b5       	in	r25, 0x2b	; 43
     9ca:	89 2b       	or	r24, r25
     9cc:	31 f0       	breq	.+12     	; 0x9da <update_sec+0x3a>
     9ce:	8a b5       	in	r24, 0x2a	; 42
     9d0:	9b b5       	in	r25, 0x2b	; 43
     9d2:	6e e5       	ldi	r22, 0x5E	; 94
     9d4:	71 e0       	ldi	r23, 0x01	; 1
     9d6:	c0 d4       	rcall	.+2432   	; 0x1358 <__udivmodhi4>
     9d8:	05 c0       	rjmp	.+10     	; 0x9e4 <update_sec+0x44>
     9da:	88 b5       	in	r24, 0x28	; 40
     9dc:	99 b5       	in	r25, 0x29	; 41
     9de:	6e e5       	ldi	r22, 0x5E	; 94
     9e0:	71 e0       	ldi	r23, 0x01	; 1
     9e2:	ba d4       	rcall	.+2420   	; 0x1358 <__udivmodhi4>
     9e4:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <total_distance>
     9e8:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <total_distance+0x1>
     9ec:	68 0f       	add	r22, r24
     9ee:	79 1f       	adc	r23, r25
     9f0:	70 93 a0 02 	sts	0x02A0, r23	; 0x8002a0 <total_distance+0x1>
     9f4:	60 93 9f 02 	sts	0x029F, r22	; 0x80029f <total_distance>
		}
		LCD_display(total_distance, func_index);
     9f8:	60 91 a3 02 	lds	r22, 0x02A3	; 0x8002a3 <func_index>
     9fc:	70 91 a4 02 	lds	r23, 0x02A4	; 0x8002a4 <func_index+0x1>
     a00:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <total_distance>
     a04:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <total_distance+0x1>
     a08:	0b de       	rcall	.-1002   	; 0x620 <LCD_display>
	}
	if(led_counter >= (OCR1A > 0 ? 0x3FF - OCR1A : 0x3FF - OCR1B))
     a0a:	8a b5       	in	r24, 0x2a	; 42
     a0c:	9b b5       	in	r25, 0x2b	; 43
     a0e:	89 2b       	or	r24, r25
     a10:	39 f0       	breq	.+14     	; 0xa20 <update_sec+0x80>
     a12:	2a b5       	in	r18, 0x2a	; 42
     a14:	3b b5       	in	r19, 0x2b	; 43
     a16:	8f ef       	ldi	r24, 0xFF	; 255
     a18:	93 e0       	ldi	r25, 0x03	; 3
     a1a:	82 1b       	sub	r24, r18
     a1c:	93 0b       	sbc	r25, r19
     a1e:	06 c0       	rjmp	.+12     	; 0xa2c <update_sec+0x8c>
     a20:	28 b5       	in	r18, 0x28	; 40
     a22:	39 b5       	in	r19, 0x29	; 41
     a24:	8f ef       	ldi	r24, 0xFF	; 255
     a26:	93 e0       	ldi	r25, 0x03	; 3
     a28:	82 1b       	sub	r24, r18
     a2a:	93 0b       	sbc	r25, r19
     a2c:	20 91 a8 02 	lds	r18, 0x02A8	; 0x8002a8 <led_counter>
     a30:	30 91 a9 02 	lds	r19, 0x02A9	; 0x8002a9 <led_counter+0x1>
     a34:	28 17       	cp	r18, r24
     a36:	39 07       	cpc	r19, r25
     a38:	98 f0       	brcs	.+38     	; 0xa60 <update_sec+0xc0>
	{
		led_counter = 0;
     a3a:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <led_counter+0x1>
     a3e:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <led_counter>
		led_toggle = !led_toggle;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <led_toggle>
     a4a:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <led_toggle+0x1>
     a4e:	23 2b       	or	r18, r19
     a50:	11 f0       	breq	.+4      	; 0xa56 <update_sec+0xb6>
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <led_toggle+0x1>
     a5a:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <led_toggle>
     a5e:	08 95       	ret
	}
	else if (led_counter >= 0x3FF)
     a60:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <led_counter>
     a64:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <led_counter+0x1>
     a68:	8f 3f       	cpi	r24, 0xFF	; 255
     a6a:	93 40       	sbci	r25, 0x03	; 3
     a6c:	24 f0       	brlt	.+8      	; 0xa76 <update_sec+0xd6>
	{
		led_counter = 0;
     a6e:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <led_counter+0x1>
     a72:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <led_counter>
     a76:	08 95       	ret

00000a78 <init_buzzer_count>:
	}
}

void init_buzzer_count(void)
{
	is_buzzer_playing = 0;
     a78:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <is_buzzer_playing>
	OCR3A = 0;
     a7c:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a80:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	beepo_idx = 0;
     a84:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <beepo_idx>
	grandfa_idx = 0;
     a88:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <grandfa_idx>
	buzzer_msec = 0;
     a8c:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <buzzer_msec+0x1>
     a90:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <buzzer_msec>
	buzzer_delay = 0;
     a94:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <buzzer_delay+0x1>
     a98:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <buzzer_delay>
     a9c:	08 95       	ret

00000a9e <auto_mode_fire_engine>:
	}
}

void auto_mode_fire_engine(void)          //소방차 자율 주행
{
    Beepo();
     a9e:	9c db       	rcall	.-2248   	; 0x1d8 <Beepo>
	distance_ultrasonic();
     aa0:	c5 d2       	rcall	.+1418   	; 0x102c <distance_ultrasonic>
	auto_algo();
     aa2:	03 df       	rcall	.-506    	; 0x8aa <auto_algo>
     aa4:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <fnd_clk>
	
	if(fnd_clk)
     aa8:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <fnd_clk+0x1>
     aac:	89 2b       	or	r24, r25
     aae:	91 f0       	breq	.+36     	; 0xad4 <auto_mode_fire_engine+0x36>
     ab0:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <fnd_clk+0x1>
	{
		fnd_clk = 0;
     ab4:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <fnd_clk>
     ab8:	60 91 a3 02 	lds	r22, 0x02A3	; 0x8002a3 <func_index>
		fnd_display(OCR1A > 0 ? OCR1A : OCR1B, func_index);
     abc:	70 91 a4 02 	lds	r23, 0x02A4	; 0x8002a4 <func_index+0x1>
     ac0:	8a b5       	in	r24, 0x2a	; 42
     ac2:	9b b5       	in	r25, 0x2b	; 43
     ac4:	89 2b       	or	r24, r25
     ac6:	19 f0       	breq	.+6      	; 0xace <auto_mode_fire_engine+0x30>
     ac8:	8a b5       	in	r24, 0x2a	; 42
     aca:	9b b5       	in	r25, 0x2b	; 43
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <auto_mode_fire_engine+0x34>
     ace:	88 b5       	in	r24, 0x28	; 40
     ad0:	99 b5       	in	r25, 0x29	; 41
     ad2:	47 dc       	rcall	.-1906   	; 0x362 <fnd_display>
     ad4:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <led_toggle>
	}
	
	if(led_toggle)
     ad8:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <led_toggle+0x1>
     adc:	89 2b       	or	r24, r25
     ade:	31 f0       	breq	.+12     	; 0xaec <auto_mode_fire_engine+0x4e>
     ae0:	e5 e6       	ldi	r30, 0x65	; 101
	{
		AUTO_RUN_LED_PORT |= 1 << AUTO_RUN_LED_PIN;
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	80 81       	ld	r24, Z
     ae6:	80 61       	ori	r24, 0x10	; 16
     ae8:	80 83       	st	Z, r24
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <auto_mode_fire_engine+0x58>
     aec:	e5 e6       	ldi	r30, 0x65	; 101
	}
	else 
	{
		AUTO_RUN_LED_PORT &= ~(1 << AUTO_RUN_LED_PIN);
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	8f 7e       	andi	r24, 0xEF	; 239
     af4:	80 83       	st	Z, r24
     af6:	67 e0       	ldi	r22, 0x07	; 7
	}
	
	if(get_button(BUTTON0, BUTTON0PIN))
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	19 db       	rcall	.-2510   	; 0x132 <get_button>
     b00:	89 2b       	or	r24, r25
	{
		init_led();
     b02:	41 f0       	breq	.+16     	; 0xb14 <auto_mode_fire_engine+0x76>
     b04:	1c de       	rcall	.-968    	; 0x73e <init_led>
		init_buzzer_count();
     b06:	b8 df       	rcall	.-144    	; 0xa78 <init_buzzer_count>
     b08:	82 e0       	ldi	r24, 0x02	; 2
		func_index = AUTO_MODE_DAYCARE_CAR;
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <func_index+0x1>
     b10:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <func_index>
     b14:	08 95       	ret

00000b16 <initialize>:
     b16:	c0 de       	rcall	.-640    	; 0x898 <init_timer0>
}

void initialize(void)
{
	init_timer0();
	init_timer1();
     b18:	5d d0       	rcall	.+186    	; 0xbd4 <init_timer1>
	init_L298N();
     b1a:	6d d0       	rcall	.+218    	; 0xbf6 <init_L298N>
	init_uart0();
     b1c:	3a d1       	rcall	.+628    	; 0xd92 <init_uart0>
	init_uart1();
     b1e:	78 d1       	rcall	.+752    	; 0xe10 <init_uart1>
	init_ultrasonic();
     b20:	64 d2       	rcall	.+1224   	; 0xfea <init_ultrasonic>
	init_button();
     b22:	05 db       	rcall	.-2550   	; 0x12e <init_button>
     b24:	0c de       	rcall	.-1000   	; 0x73e <init_led>
	init_led();
     b26:	4a db       	rcall	.-2412   	; 0x1bc <init_buzzer>
     b28:	9d dc       	rcall	.-1734   	; 0x464 <init_fnd>
	init_buzzer();
     b2a:	33 cd       	rjmp	.-1434   	; 0x592 <I2C_LCD_init>
     b2c:	08 95       	ret

00000b2e <main>:
	init_fnd();
     b2e:	f3 df       	rcall	.-26     	; 0xb16 <initialize>
     b30:	86 e0       	ldi	r24, 0x06	; 6
	I2C_LCD_init();
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <__iob+0x3>
}

int main(void)
{
	initialize();
	stdout = &OUTPUT;
     b38:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <__iob+0x2>
	sei();
	
	while(1)
	{
		update_sec();
     b3c:	78 94       	sei
     b3e:	30 df       	rcall	.-416    	; 0x9a0 <update_sec>
		pfunc[func_index] ();
     b40:	e0 91 a3 02 	lds	r30, 0x02A3	; 0x8002a3 <func_index>
     b44:	f0 91 a4 02 	lds	r31, 0x02A4	; 0x8002a4 <func_index+0x1>
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	e0 50       	subi	r30, 0x00	; 0
     b4e:	ff 4f       	sbci	r31, 0xFF	; 255
     b50:	01 90       	ld	r0, Z+
     b52:	f0 81       	ld	r31, Z
     b54:	e0 2d       	mov	r30, r0
     b56:	09 95       	icall
     b58:	f2 cf       	rjmp	.-28     	; 0xb3e <main+0x10>

00000b5a <auto_mode_daycare_car>:
	}
}

void auto_mode_daycare_car(void)          //어린이차 자율 주행
{
	GrandFa();
     b5a:	9f db       	rcall	.-2242   	; 0x29a <GrandFa>
	distance_ultrasonic();
     b5c:	67 d2       	rcall	.+1230   	; 0x102c <distance_ultrasonic>
	auto_algo();
     b5e:	a5 de       	rcall	.-694    	; 0x8aa <auto_algo>
     b60:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <fnd_clk>
	
	if(fnd_clk)
     b64:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <fnd_clk+0x1>
     b68:	89 2b       	or	r24, r25
     b6a:	91 f0       	breq	.+36     	; 0xb90 <auto_mode_daycare_car+0x36>
     b6c:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <fnd_clk+0x1>
	{
		fnd_clk = 0;
     b70:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <fnd_clk>
     b74:	60 91 a3 02 	lds	r22, 0x02A3	; 0x8002a3 <func_index>
		fnd_display(OCR1A > 0 ? OCR1A : OCR1B, func_index);
     b78:	70 91 a4 02 	lds	r23, 0x02A4	; 0x8002a4 <func_index+0x1>
     b7c:	8a b5       	in	r24, 0x2a	; 42
     b7e:	9b b5       	in	r25, 0x2b	; 43
     b80:	89 2b       	or	r24, r25
     b82:	19 f0       	breq	.+6      	; 0xb8a <auto_mode_daycare_car+0x30>
     b84:	8a b5       	in	r24, 0x2a	; 42
     b86:	9b b5       	in	r25, 0x2b	; 43
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <auto_mode_daycare_car+0x34>
     b8a:	88 b5       	in	r24, 0x28	; 40
     b8c:	99 b5       	in	r25, 0x29	; 41
     b8e:	e9 db       	rcall	.-2094   	; 0x362 <fnd_display>
     b90:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <led_toggle>
	}
	
	if(led_toggle)
     b94:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <led_toggle+0x1>
     b98:	89 2b       	or	r24, r25
     b9a:	31 f0       	breq	.+12     	; 0xba8 <auto_mode_daycare_car+0x4e>
     b9c:	e5 e6       	ldi	r30, 0x65	; 101
	{
		AUTO_RUN_LED_PORT |= 1 << AUTO_RUN_LED_PIN;
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	80 61       	ori	r24, 0x10	; 16
     ba4:	80 83       	st	Z, r24
     ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <auto_mode_daycare_car+0x58>
     ba8:	e5 e6       	ldi	r30, 0x65	; 101
	}
	else
	{
		AUTO_RUN_LED_PORT &= ~(1 << AUTO_RUN_LED_PIN);
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	8f 7e       	andi	r24, 0xEF	; 239
     bb0:	80 83       	st	Z, r24
     bb2:	67 e0       	ldi	r22, 0x07	; 7
	}
	
	if(get_button(BUTTON0, BUTTON0PIN))
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	bb da       	rcall	.-2698   	; 0x132 <get_button>
     bbc:	89 2b       	or	r24, r25
     bbe:	49 f0       	breq	.+18     	; 0xbd2 <auto_mode_daycare_car+0x78>
	{
		initialize();
     bc0:	aa df       	rcall	.-172    	; 0xb16 <initialize>
     bc2:	19 bc       	out	0x29, r1	; 41
		OCR1A = OCR1B = 0;
     bc4:	18 bc       	out	0x28, r1	; 40
     bc6:	1b bc       	out	0x2b, r1	; 43
     bc8:	1a bc       	out	0x2a, r1	; 42
     bca:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <func_index+0x1>
		func_index = MANUAL_MODE;
     bce:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <func_index>
     bd2:	08 95       	ret

00000bd4 <init_timer1>:
	// 분주비 : 64 16000000 / 64 --> 2500000 Hz (250kHz)
	// T = 1/f = 1 / 2500000Hz --> 0.000004sec(4us)
	// 2500000Hz 에서 256개 펄스를 count하면 소요시간 1.02ms
	//                127개                         0.5ms
	//P318 표 14-1
	TCCR1B |= 1 << CS11 | 1 << CS10; //분주비 : 64
     bd4:	8e b5       	in	r24, 0x2e	; 46
     bd6:	83 60       	ori	r24, 0x03	; 3
     bd8:	8e bd       	out	0x2e, r24	; 46
	
	//16 timer 1번의 모드 14: 16비트 고속 PWM (p348 표15-6)
	TCCR1A |= 1 << WGM11;    //TOP을 ICR1에 지정을 할 수 있다.
     bda:	8f b5       	in	r24, 0x2f	; 47
     bdc:	82 60       	ori	r24, 0x02	; 2
     bde:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM12 | 1 << WGM13;
     be0:	8e b5       	in	r24, 0x2e	; 46
     be2:	88 61       	ori	r24, 0x18	; 24
     be4:	8e bd       	out	0x2e, r24	; 46
	
	// 비반전 모드 TOP : ICR1비교일치값(PWM)지정 : OCR1A, OCR1B
	// 사용자가 설정한 PWM값 일치시 OCR1A, OCR1B의 출력핀이 LOW로 바뀌고 BOTTOM에 HIGH로 바뀐다
    TCCR1A |= 1 << COM1A1 | 1 << COM1B1;
     be6:	8f b5       	in	r24, 0x2f	; 47
     be8:	80 6a       	ori	r24, 0xA0	; 160
     bea:	8f bd       	out	0x2f, r24	; 47
	
	ICR1 = 0x3FF; // ICR1(Input Capture Register) : TOP 값 1023 == > 4ms
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	93 e0       	ldi	r25, 0x03	; 3
     bf0:	97 bd       	out	0x27, r25	; 39
     bf2:	86 bd       	out	0x26, r24	; 38
     bf4:	08 95       	ret

00000bf6 <init_L298N>:
	1              1       stop
*/

void init_L298N(void)
{
	MOTOR_PWM_DDR |= 1 << MOTOR_LEFT_PORT_DDR | 1 << MOTOR_RIGHT_PORT_DDR;
     bf6:	87 b3       	in	r24, 0x17	; 23
     bf8:	80 66       	ori	r24, 0x60	; 96
     bfa:	87 bb       	out	0x17, r24	; 23
	MOTOR_DRIVER_DIRECTION_DDR |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3;   // IN1 IN2 IN3 IN4 출력모드
     bfc:	e1 e6       	ldi	r30, 0x61	; 97
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	8f 60       	ori	r24, 0x0F	; 15
     c04:	80 83       	st	Z, r24
	
    MOTOR_DRIVER_DIRECTION_PORT &= ~( 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 ); 
     c06:	e2 e6       	ldi	r30, 0x62	; 98
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	80 7f       	andi	r24, 0xF0	; 240
     c0e:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 3 | 1 << 0;                           // 전진모드
     c10:	80 81       	ld	r24, Z
     c12:	89 60       	ori	r24, 0x09	; 9
     c14:	80 83       	st	Z, r24
     c16:	08 95       	ret

00000c18 <stop>:
}

void stop(void)
{
	MOTOR_DRIVER_DIRECTION_PORT &= ~( 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 );
     c18:	e2 e6       	ldi	r30, 0x62	; 98
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	80 7f       	andi	r24, 0xF0	; 240
     c20:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3;       // 정지
     c22:	80 81       	ld	r24, Z
     c24:	8f 60       	ori	r24, 0x0F	; 15
     c26:	80 83       	st	Z, r24
	OCR1A = OCR1B = 0;
     c28:	19 bc       	out	0x29, r1	; 41
     c2a:	18 bc       	out	0x28, r1	; 40
     c2c:	1b bc       	out	0x2b, r1	; 43
     c2e:	1a bc       	out	0x2a, r1	; 42
     c30:	08 95       	ret

00000c32 <forward>:
}

void forward(int speed)
{
     c32:	9c 01       	movw	r18, r24
	 MOTOR_DRIVER_DIRECTION_PORT &= ~( 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 ); 
     c34:	e2 e6       	ldi	r30, 0x62	; 98
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	90 81       	ld	r25, Z
     c3a:	90 7f       	andi	r25, 0xF0	; 240
     c3c:	90 83       	st	Z, r25
	 MOTOR_DRIVER_DIRECTION_PORT |= 1 << 3 | 1 << 0;                        // 전진모드
     c3e:	90 81       	ld	r25, Z
     c40:	99 60       	ori	r25, 0x09	; 9
     c42:	90 83       	st	Z, r25
	 OCR1A = OCR1B = speed;                                           // PORTB5(OCR1A) 왼쪽, PORTB6(OCR1B)오른쪽
     c44:	39 bd       	out	0x29, r19	; 41
     c46:	28 bd       	out	0x28, r18	; 40
     c48:	3b bd       	out	0x2b, r19	; 43
     c4a:	2a bd       	out	0x2a, r18	; 42
     c4c:	08 95       	ret

00000c4e <backward>:
}

void backward(int speed)
{
     c4e:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~( 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 );
     c50:	e2 e6       	ldi	r30, 0x62	; 98
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	90 81       	ld	r25, Z
     c56:	90 7f       	andi	r25, 0xF0	; 240
     c58:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 1;                        // 후진모드
     c5a:	90 81       	ld	r25, Z
     c5c:	96 60       	ori	r25, 0x06	; 6
     c5e:	90 83       	st	Z, r25
	OCR1A = OCR1B = speed;                                           // PORTB5(OCR1A) 왼쪽, PORTB6(OCR1B)오른쪽
     c60:	39 bd       	out	0x29, r19	; 41
     c62:	28 bd       	out	0x28, r18	; 40
     c64:	3b bd       	out	0x2b, r19	; 43
     c66:	2a bd       	out	0x2a, r18	; 42
     c68:	08 95       	ret

00000c6a <turn_left>:
}

void turn_left(int speed)
{
     c6a:	9c 01       	movw	r18, r24
	 MOTOR_DRIVER_DIRECTION_PORT &= ~( 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 );
     c6c:	e2 e6       	ldi	r30, 0x62	; 98
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	90 81       	ld	r25, Z
     c72:	90 7f       	andi	r25, 0xF0	; 240
     c74:	90 83       	st	Z, r25
	 MOTOR_DRIVER_DIRECTION_PORT |= 1 << 3 | 1 << 0;                         //전진모드
     c76:	90 81       	ld	r25, Z
     c78:	99 60       	ori	r25, 0x09	; 9
     c7a:	90 83       	st	Z, r25
	 OCR1A = 0;                   //왼쪽 바퀴
     c7c:	1b bc       	out	0x2b, r1	; 43
     c7e:	1a bc       	out	0x2a, r1	; 42
	 OCR1B = speed;               //오른쪽 바퀴
     c80:	39 bd       	out	0x29, r19	; 41
     c82:	28 bd       	out	0x28, r18	; 40
     c84:	08 95       	ret

00000c86 <turn_right>:
}

void turn_right(int speed)
{
     c86:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~( 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 );
     c88:	e2 e6       	ldi	r30, 0x62	; 98
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	90 81       	ld	r25, Z
     c8e:	90 7f       	andi	r25, 0xF0	; 240
     c90:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 3 | 1 << 0;                         //전진모드
     c92:	90 81       	ld	r25, Z
     c94:	99 60       	ori	r25, 0x09	; 9
     c96:	90 83       	st	Z, r25
	OCR1A = speed;             //왼쪽 바퀴
     c98:	3b bd       	out	0x2b, r19	; 43
     c9a:	2a bd       	out	0x2a, r18	; 42
	OCR1B = 0;		          //오른쪽 바퀴
     c9c:	19 bc       	out	0x29, r1	; 41
     c9e:	18 bc       	out	0x28, r1	; 40
     ca0:	08 95       	ret

00000ca2 <__vector_18>:
   예)  led_all_on\n ==> 11번 이곳으로 들어 온다 
        led_all_off\n
*/
volatile uint8_t rx_msg_received=0;
ISR(USART0_RX_vect)
{
     ca2:	1f 92       	push	r1
     ca4:	0f 92       	push	r0
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	0f 92       	push	r0
     caa:	11 24       	eor	r1, r1
     cac:	0b b6       	in	r0, 0x3b	; 59
     cae:	0f 92       	push	r0
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	4f 93       	push	r20
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	bf 93       	push	r27
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	1f 92       	push	r1
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t rx_data;
	volatile static int i=0;
	rx_data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1byte를 읽어 들인다. 
     cd2:	8c b1       	in	r24, 0x0c	; 12
     cd4:	89 83       	std	Y+1, r24	; 0x01
	                 // rx_data = UDR0;를 실행하면 UDR0의 내용이 빈다.(empty)
	if (rx_data == '\n')
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	8a 30       	cpi	r24, 0x0A	; 10
     cda:	49 f5       	brne	.+82     	; 0xd2e <__vector_18+0x8c>
	{
		rx_buff[rear++][i] = '\0';
     cdc:	20 91 b2 02 	lds	r18, 0x02B2	; 0x8002b2 <rear>
     ce0:	30 91 b3 02 	lds	r19, 0x02B3	; 0x8002b3 <rear+0x1>
     ce4:	c9 01       	movw	r24, r18
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <rear+0x1>
     cec:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <rear>
     cf0:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <i.1877>
     cf4:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <i.1877+0x1>
     cf8:	48 e2       	ldi	r20, 0x28	; 40
     cfa:	42 9f       	mul	r20, r18
     cfc:	f0 01       	movw	r30, r0
     cfe:	43 9f       	mul	r20, r19
     d00:	f0 0d       	add	r31, r0
     d02:	11 24       	eor	r1, r1
     d04:	e5 54       	subi	r30, 0x45	; 69
     d06:	fd 4f       	sbci	r31, 0xFD	; 253
     d08:	e8 0f       	add	r30, r24
     d0a:	f9 1f       	adc	r31, r25
     d0c:	10 82       	st	Z, r1
		rear %= COMMAND_NUMBER; // rear : 0~9
     d0e:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <rear>
     d12:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <rear+0x1>
     d16:	6a e0       	ldi	r22, 0x0A	; 10
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	32 d3       	rcall	.+1636   	; 0x1380 <__divmodhi4>
     d1c:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <rear+0x1>
     d20:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <rear>
		i=0; //다음 string을 저장하기 위한 1차원 index값을 0으로
     d24:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <i.1877+0x1>
     d28:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <i.1877>
     d2c:	1c c0       	rjmp	.+56     	; 0xd66 <__vector_18+0xc4>
		// !!!! rx_buff queue full check 하는 logic 추가
	}
	else
	{
		rx_buff[rear][i++] = rx_data;
     d2e:	60 91 b2 02 	lds	r22, 0x02B2	; 0x8002b2 <rear>
     d32:	70 91 b3 02 	lds	r23, 0x02B3	; 0x8002b3 <rear+0x1>
     d36:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <i.1877>
     d3a:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <i.1877+0x1>
     d3e:	9c 01       	movw	r18, r24
     d40:	2f 5f       	subi	r18, 0xFF	; 255
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	30 93 b1 02 	sts	0x02B1, r19	; 0x8002b1 <i.1877+0x1>
     d48:	20 93 b0 02 	sts	0x02B0, r18	; 0x8002b0 <i.1877>
     d4c:	49 81       	ldd	r20, Y+1	; 0x01
     d4e:	58 e2       	ldi	r21, 0x28	; 40
     d50:	56 9f       	mul	r21, r22
     d52:	90 01       	movw	r18, r0
     d54:	57 9f       	mul	r21, r23
     d56:	30 0d       	add	r19, r0
     d58:	11 24       	eor	r1, r1
     d5a:	25 54       	subi	r18, 0x45	; 69
     d5c:	3d 4f       	sbci	r19, 0xFD	; 253
     d5e:	f9 01       	movw	r30, r18
     d60:	e8 0f       	add	r30, r24
     d62:	f9 1f       	adc	r31, r25
     d64:	40 83       	st	Z, r20
		//COMMAND LENGTH를 check 하는 logic 추가
	}
}
     d66:	0f 90       	pop	r0
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	ff 91       	pop	r31
     d6e:	ef 91       	pop	r30
     d70:	bf 91       	pop	r27
     d72:	af 91       	pop	r26
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	7f 91       	pop	r23
     d7a:	6f 91       	pop	r22
     d7c:	5f 91       	pop	r21
     d7e:	4f 91       	pop	r20
     d80:	3f 91       	pop	r19
     d82:	2f 91       	pop	r18
     d84:	0f 90       	pop	r0
     d86:	0b be       	out	0x3b, r0	; 59
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	0f 90       	pop	r0
     d8e:	1f 90       	pop	r1
     d90:	18 95       	reti

00000d92 <init_uart0>:
*/

void init_uart0(void)
{
	// 1. 9600bps로 설정
	UBRR0H = 0x00;
     d92:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;  // 9600bps P219 표9-9
     d96:	8f ec       	ldi	r24, 0xCF	; 207
     d98:	89 b9       	out	0x09, r24	; 9
	// 2. 2배속 통신  표9-1
	UCSR0A |= 1 << U2X0;  // 2배속 통신 
     d9a:	59 9a       	sbi	0x0b, 1	; 11
	UCSR0C |= 0x06;   // 비동기/data8bits/none parity
     d9c:	e5 e9       	ldi	r30, 0x95	; 149
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	86 60       	ori	r24, 0x06	; 6
     da4:	80 83       	st	Z, r24
	// P215 표9-1
	// RXEN0 : UART0로 부터 수신이 가능 하도록 
	// TXEN0 : UART0로 부터 송신이 가능 하도록 
	// RXCIE0 : UART0로 부터 1byte가 들어오면(stop bit가 들어 오면)) rx interrupt를 발생 시켜라
	UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     da6:	8a b1       	in	r24, 0x0a	; 10
     da8:	88 69       	ori	r24, 0x98	; 152
     daa:	8a b9       	out	0x0a, r24	; 10
     dac:	08 95       	ret

00000dae <UART0_transmit>:

// UART0로 1byte를 전송 하는 함수 (polling방식)
void UART0_transmit(uint8_t data)
{
	// 데이터 전송 중이면 전송이 끝날떄 까지 기다린다. 
	while ( !(UCSR0A & 1 << UDRE0))
     dae:	5d 9b       	sbis	0x0b, 5	; 11
     db0:	fe cf       	rjmp	.-4      	; 0xdae <UART0_transmit>
		;   // no operation
	UDR0 = data;  // data를 H/W전송 register에 쏜다. 
     db2:	8c b9       	out	0x0c, r24	; 12
     db4:	08 95       	ret

00000db6 <__vector_30>:

void init_uart1(void);

volatile uint8_t bt_data = 0;
ISR(USART1_RX_vect)
{
     db6:	1f 92       	push	r1
     db8:	0f 92       	push	r0
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	0f 92       	push	r0
     dbe:	11 24       	eor	r1, r1
     dc0:	0b b6       	in	r0, 0x3b	; 59
     dc2:	0f 92       	push	r0
     dc4:	2f 93       	push	r18
     dc6:	3f 93       	push	r19
     dc8:	4f 93       	push	r20
     dca:	5f 93       	push	r21
     dcc:	6f 93       	push	r22
     dce:	7f 93       	push	r23
     dd0:	8f 93       	push	r24
     dd2:	9f 93       	push	r25
     dd4:	af 93       	push	r26
     dd6:	bf 93       	push	r27
     dd8:	ef 93       	push	r30
     dda:	ff 93       	push	r31
	bt_data = UDR1;  // bt로 부터 들어온 HW reg(UDR1)을 1byte 읽어 들인다.
     ddc:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     de0:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <bt_data>
	
    UART0_transmit(bt_data); //bt로 부터 들어온 문자가 어떤것인지 확인하기위해서 comportmaster 로 출력
     de4:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <bt_data>
     de8:	e2 df       	rcall	.-60     	; 0xdae <UART0_transmit>

}                    // bt_data = UDR1을 실행하면 UDR1의 내용이 빈다.
     dea:	ff 91       	pop	r31
     dec:	ef 91       	pop	r30
     dee:	bf 91       	pop	r27
     df0:	af 91       	pop	r26
     df2:	9f 91       	pop	r25
     df4:	8f 91       	pop	r24
     df6:	7f 91       	pop	r23
     df8:	6f 91       	pop	r22
     dfa:	5f 91       	pop	r21
     dfc:	4f 91       	pop	r20
     dfe:	3f 91       	pop	r19
     e00:	2f 91       	pop	r18
     e02:	0f 90       	pop	r0
     e04:	0b be       	out	0x3b, r0	; 59
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	0f 90       	pop	r0
     e0c:	1f 90       	pop	r1
     e0e:	18 95       	reti

00000e10 <init_uart1>:
*/

void init_uart1(void)
{
	// 1. 9600bps로 설정
	UBRR1H = 0x00;
     e10:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;  // 9600bps P219 표9-9
     e14:	8f ec       	ldi	r24, 0xCF	; 207
     e16:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2. 2배속 통신  표9-1
	UCSR1A |= 1 << U2X1;  // 2배속 통신 
     e1a:	eb e9       	ldi	r30, 0x9B	; 155
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	82 60       	ori	r24, 0x02	; 2
     e22:	80 83       	st	Z, r24
	UCSR1C |= 0x06;   // 비동기/data8bits/none parity
     e24:	ed e9       	ldi	r30, 0x9D	; 157
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	86 60       	ori	r24, 0x06	; 6
     e2c:	80 83       	st	Z, r24
	// P215 표9-1
	// RXEN1 : UART1로 부터 수신이 가능 하도록 
	// TXEN1 : UART1로 부터 송신이 가능 하도록 
	// RXCIE1 : UART1로 부터 1byte가 들어오면(stop bit가 들어 오면)) rx interrupt를 발생 시켜라
	UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     e2e:	ea e9       	ldi	r30, 0x9A	; 154
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	88 69       	ori	r24, 0x98	; 152
     e36:	80 83       	st	Z, r24
     e38:	08 95       	ret

00000e3a <__vector_5>:
volatile int ultrasonic_dis[3] = {0};
volatile char scm[3][50];
static uint16_t start_time = 0;

ISR(INT4_vect)
{
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	11 24       	eor	r1, r1
     e44:	0b b6       	in	r0, 0x3b	; 59
     e46:	0f 92       	push	r0
     e48:	2f 93       	push	r18
     e4a:	3f 93       	push	r19
     e4c:	4f 93       	push	r20
     e4e:	5f 93       	push	r21
     e50:	6f 93       	push	r22
     e52:	7f 93       	push	r23
     e54:	8f 93       	push	r24
     e56:	9f 93       	push	r25
     e58:	af 93       	push	r26
     e5a:	bf 93       	push	r27
     e5c:	ef 93       	push	r30
     e5e:	ff 93       	push	r31
	if(ECHO_PIN & 1 << LEFT_ECHO)
     e60:	0c 9b       	sbis	0x01, 4	; 1
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <__vector_5+0x2e>
	{
		TCNT2 = 0;
     e64:	14 bc       	out	0x24, r1	; 36
     e66:	1e c0       	rjmp	.+60     	; 0xea4 <__vector_5+0x6a>
	}
	else
	{
		ultrasonic_dis[0] = 1000000.0 * TCNT2 * 1024 / F_CPU / 58;
     e68:	64 b5       	in	r22, 0x24	; 36
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	84 d1       	rcall	.+776    	; 0x117a <__floatsisf>
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	34 e2       	ldi	r19, 0x24	; 36
     e76:	44 e7       	ldi	r20, 0x74	; 116
     e78:	59 e4       	ldi	r21, 0x49	; 73
     e7a:	0b d2       	rcall	.+1046   	; 0x1292 <__mulsf3>
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e8       	ldi	r20, 0x80	; 128
     e82:	54 e4       	ldi	r21, 0x44	; 68
     e84:	06 d2       	rcall	.+1036   	; 0x1292 <__mulsf3>
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	34 e2       	ldi	r19, 0x24	; 36
     e8a:	44 e7       	ldi	r20, 0x74	; 116
     e8c:	5b e4       	ldi	r21, 0x4B	; 75
     e8e:	da d0       	rcall	.+436    	; 0x1044 <__divsf3>
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	48 e6       	ldi	r20, 0x68	; 104
     e96:	52 e4       	ldi	r21, 0x42	; 66
     e98:	d5 d0       	rcall	.+426    	; 0x1044 <__divsf3>
     e9a:	3c d1       	rcall	.+632    	; 0x1114 <__fixsfsi>
     e9c:	70 93 b6 02 	sts	0x02B6, r23	; 0x8002b6 <ultrasonic_dis+0x1>
     ea0:	60 93 b5 02 	sts	0x02B5, r22	; 0x8002b5 <ultrasonic_dis>
		//sprintf(scm[0],"left: %d cm\n", ultrasonic_dis[0] );
	}
}
     ea4:	ff 91       	pop	r31
     ea6:	ef 91       	pop	r30
     ea8:	bf 91       	pop	r27
     eaa:	af 91       	pop	r26
     eac:	9f 91       	pop	r25
     eae:	8f 91       	pop	r24
     eb0:	7f 91       	pop	r23
     eb2:	6f 91       	pop	r22
     eb4:	5f 91       	pop	r21
     eb6:	4f 91       	pop	r20
     eb8:	3f 91       	pop	r19
     eba:	2f 91       	pop	r18
     ebc:	0f 90       	pop	r0
     ebe:	0b be       	out	0x3b, r0	; 59
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <__vector_6>:

ISR(INT5_vect)
{
     eca:	1f 92       	push	r1
     ecc:	0f 92       	push	r0
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	0f 92       	push	r0
     ed2:	11 24       	eor	r1, r1
     ed4:	0b b6       	in	r0, 0x3b	; 59
     ed6:	0f 92       	push	r0
     ed8:	2f 93       	push	r18
     eda:	3f 93       	push	r19
     edc:	4f 93       	push	r20
     ede:	5f 93       	push	r21
     ee0:	6f 93       	push	r22
     ee2:	7f 93       	push	r23
     ee4:	8f 93       	push	r24
     ee6:	9f 93       	push	r25
     ee8:	af 93       	push	r26
     eea:	bf 93       	push	r27
     eec:	ef 93       	push	r30
     eee:	ff 93       	push	r31
	if(ECHO_PIN & 1 << MIDDLE_ECHO)
     ef0:	0d 9b       	sbis	0x01, 5	; 1
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <__vector_6+0x2e>
	{
		TCNT2 = 0;
     ef4:	14 bc       	out	0x24, r1	; 36
     ef6:	1e c0       	rjmp	.+60     	; 0xf34 <__vector_6+0x6a>
	}
	else
	{
		ultrasonic_dis[1] = 1000000.0 * TCNT2 * 1024 / F_CPU / 58;
     ef8:	64 b5       	in	r22, 0x24	; 36
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	3c d1       	rcall	.+632    	; 0x117a <__floatsisf>
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	34 e2       	ldi	r19, 0x24	; 36
     f06:	44 e7       	ldi	r20, 0x74	; 116
     f08:	59 e4       	ldi	r21, 0x49	; 73
     f0a:	c3 d1       	rcall	.+902    	; 0x1292 <__mulsf3>
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e8       	ldi	r20, 0x80	; 128
     f12:	54 e4       	ldi	r21, 0x44	; 68
     f14:	be d1       	rcall	.+892    	; 0x1292 <__mulsf3>
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	34 e2       	ldi	r19, 0x24	; 36
     f1a:	44 e7       	ldi	r20, 0x74	; 116
     f1c:	5b e4       	ldi	r21, 0x4B	; 75
     f1e:	92 d0       	rcall	.+292    	; 0x1044 <__divsf3>
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	48 e6       	ldi	r20, 0x68	; 104
     f26:	52 e4       	ldi	r21, 0x42	; 66
     f28:	8d d0       	rcall	.+282    	; 0x1044 <__divsf3>
     f2a:	f4 d0       	rcall	.+488    	; 0x1114 <__fixsfsi>
     f2c:	70 93 b8 02 	sts	0x02B8, r23	; 0x8002b8 <ultrasonic_dis+0x3>
     f30:	60 93 b7 02 	sts	0x02B7, r22	; 0x8002b7 <ultrasonic_dis+0x2>
		//sprintf(scm[1],"middle: %d cm\n", ultrasonic_dis[1] );
	}
}
     f34:	ff 91       	pop	r31
     f36:	ef 91       	pop	r30
     f38:	bf 91       	pop	r27
     f3a:	af 91       	pop	r26
     f3c:	9f 91       	pop	r25
     f3e:	8f 91       	pop	r24
     f40:	7f 91       	pop	r23
     f42:	6f 91       	pop	r22
     f44:	5f 91       	pop	r21
     f46:	4f 91       	pop	r20
     f48:	3f 91       	pop	r19
     f4a:	2f 91       	pop	r18
     f4c:	0f 90       	pop	r0
     f4e:	0b be       	out	0x3b, r0	; 59
     f50:	0f 90       	pop	r0
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	0f 90       	pop	r0
     f56:	1f 90       	pop	r1
     f58:	18 95       	reti

00000f5a <__vector_7>:

ISR(INT6_vect)
{
     f5a:	1f 92       	push	r1
     f5c:	0f 92       	push	r0
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	0f 92       	push	r0
     f62:	11 24       	eor	r1, r1
     f64:	0b b6       	in	r0, 0x3b	; 59
     f66:	0f 92       	push	r0
     f68:	2f 93       	push	r18
     f6a:	3f 93       	push	r19
     f6c:	4f 93       	push	r20
     f6e:	5f 93       	push	r21
     f70:	6f 93       	push	r22
     f72:	7f 93       	push	r23
     f74:	8f 93       	push	r24
     f76:	9f 93       	push	r25
     f78:	af 93       	push	r26
     f7a:	bf 93       	push	r27
     f7c:	ef 93       	push	r30
     f7e:	ff 93       	push	r31
	if(ECHO_PIN & 1 << RIGHT_ECHO)
     f80:	0e 9b       	sbis	0x01, 6	; 1
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <__vector_7+0x2e>
	{
		TCNT2 = 0;
     f84:	14 bc       	out	0x24, r1	; 36
     f86:	1e c0       	rjmp	.+60     	; 0xfc4 <__vector_7+0x6a>
	}
	else
	{
		ultrasonic_dis[2] = 1000000.0 * TCNT2 * 1024 / F_CPU / 58;
     f88:	64 b5       	in	r22, 0x24	; 36
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	f4 d0       	rcall	.+488    	; 0x117a <__floatsisf>
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	34 e2       	ldi	r19, 0x24	; 36
     f96:	44 e7       	ldi	r20, 0x74	; 116
     f98:	59 e4       	ldi	r21, 0x49	; 73
     f9a:	7b d1       	rcall	.+758    	; 0x1292 <__mulsf3>
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e8       	ldi	r20, 0x80	; 128
     fa2:	54 e4       	ldi	r21, 0x44	; 68
     fa4:	76 d1       	rcall	.+748    	; 0x1292 <__mulsf3>
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	34 e2       	ldi	r19, 0x24	; 36
     faa:	44 e7       	ldi	r20, 0x74	; 116
     fac:	5b e4       	ldi	r21, 0x4B	; 75
     fae:	4a d0       	rcall	.+148    	; 0x1044 <__divsf3>
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	48 e6       	ldi	r20, 0x68	; 104
     fb6:	52 e4       	ldi	r21, 0x42	; 66
     fb8:	45 d0       	rcall	.+138    	; 0x1044 <__divsf3>
     fba:	ac d0       	rcall	.+344    	; 0x1114 <__fixsfsi>
     fbc:	70 93 ba 02 	sts	0x02BA, r23	; 0x8002ba <ultrasonic_dis+0x5>
     fc0:	60 93 b9 02 	sts	0x02B9, r22	; 0x8002b9 <ultrasonic_dis+0x4>
		//sprintf(scm[2],"right: %d cm\n", ultrasonic_dis[2] );
	}
}
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	bf 91       	pop	r27
     fca:	af 91       	pop	r26
     fcc:	9f 91       	pop	r25
     fce:	8f 91       	pop	r24
     fd0:	7f 91       	pop	r23
     fd2:	6f 91       	pop	r22
     fd4:	5f 91       	pop	r21
     fd6:	4f 91       	pop	r20
     fd8:	3f 91       	pop	r19
     fda:	2f 91       	pop	r18
     fdc:	0f 90       	pop	r0
     fde:	0b be       	out	0x3b, r0	; 59
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <init_ultrasonic>:

void init_ultrasonic(void)
{
	TRIG_DDR |= 1 << LEFT_TRIG | 1 << MIDDLE_TRIG | 1 << RIGHT_TRIG ;
     fea:	8a b3       	in	r24, 0x1a	; 26
     fec:	87 60       	ori	r24, 0x07	; 7
     fee:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR &= ~(1 << LEFT_ECHO | 1 << MIDDLE_ECHO | 1 << RIGHT_ECHO); 
     ff0:	82 b1       	in	r24, 0x02	; 2
     ff2:	8f 78       	andi	r24, 0x8F	; 143
     ff4:	82 b9       	out	0x02, r24	; 2
	
	EICRB |= 0 << ISC41 | 1 << ISC40 | 0 << ISC51 | 1 << ISC50 | 0 << ISC61 | 1 << ISC60; 
     ff6:	8a b7       	in	r24, 0x3a	; 58
     ff8:	85 61       	ori	r24, 0x15	; 21
     ffa:	8a bf       	out	0x3a, r24	; 58
	
	TCCR2 |= 1 << CS22 | 1 << CS20; 
     ffc:	85 b5       	in	r24, 0x25	; 37
     ffe:	85 60       	ori	r24, 0x05	; 5
    1000:	85 bd       	out	0x25, r24	; 37
	
	EIMSK |= 1 << INT4 | 1 << INT5 | 1 << INT6; 
    1002:	89 b7       	in	r24, 0x39	; 57
    1004:	80 67       	ori	r24, 0x70	; 112
    1006:	89 bf       	out	0x39, r24	; 57
    1008:	08 95       	ret

0000100a <trigger_ultrasonic>:
}

void trigger_ultrasonic(void)
{
	TRIG_PORT &= ~(1 << LEFT_TRIG | 1 << MIDDLE_TRIG | 1 << RIGHT_TRIG); //low
    100a:	8b b3       	in	r24, 0x1b	; 27
    100c:	88 7f       	andi	r24, 0xF8	; 248
    100e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1010:	85 e0       	ldi	r24, 0x05	; 5
    1012:	8a 95       	dec	r24
    1014:	f1 f7       	brne	.-4      	; 0x1012 <trigger_ultrasonic+0x8>
    1016:	00 00       	nop
	_delay_us(1);
	TRIG_PORT |= 1 << LEFT_TRIG | 1 << MIDDLE_TRIG | 1 << RIGHT_TRIG; //high
    1018:	8b b3       	in	r24, 0x1b	; 27
    101a:	87 60       	ori	r24, 0x07	; 7
    101c:	8b bb       	out	0x1b, r24	; 27
    101e:	80 e5       	ldi	r24, 0x50	; 80
    1020:	8a 95       	dec	r24
    1022:	f1 f7       	brne	.-4      	; 0x1020 <trigger_ultrasonic+0x16>
	_delay_us(15); //규격에는 10us인데 여유를 둬서 15us
	TRIG_PORT &= ~(1 << LEFT_TRIG | 1 << MIDDLE_TRIG | 1 << RIGHT_TRIG); //low
    1024:	8b b3       	in	r24, 0x1b	; 27
    1026:	88 7f       	andi	r24, 0xF8	; 248
    1028:	8b bb       	out	0x1b, r24	; 27
    102a:	08 95       	ret

0000102c <distance_ultrasonic>:
}

void distance_ultrasonic(void)
{
	if(ultrasonic_check_timer >= 50) // 0.5초
    102c:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <ultrasonic_check_timer>
    1030:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <ultrasonic_check_timer+0x1>
    1034:	c2 97       	sbiw	r24, 0x32	; 50
    1036:	2c f0       	brlt	.+10     	; 0x1042 <distance_ultrasonic+0x16>
	{
		ultrasonic_check_timer = 0;
    1038:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <ultrasonic_check_timer+0x1>
    103c:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <ultrasonic_check_timer>
		//printf("%s%s%s",scm[0],scm[1],scm[2]);
		trigger_ultrasonic();
    1040:	e4 cf       	rjmp	.-56     	; 0x100a <trigger_ultrasonic>
    1042:	08 95       	ret

00001044 <__divsf3>:
    1044:	0c d0       	rcall	.+24     	; 0x105e <__divsf3x>
    1046:	eb c0       	rjmp	.+470    	; 0x121e <__fp_round>
    1048:	e3 d0       	rcall	.+454    	; 0x1210 <__fp_pscB>
    104a:	40 f0       	brcs	.+16     	; 0x105c <__divsf3+0x18>
    104c:	da d0       	rcall	.+436    	; 0x1202 <__fp_pscA>
    104e:	30 f0       	brcs	.+12     	; 0x105c <__divsf3+0x18>
    1050:	21 f4       	brne	.+8      	; 0x105a <__divsf3+0x16>
    1052:	5f 3f       	cpi	r21, 0xFF	; 255
    1054:	19 f0       	breq	.+6      	; 0x105c <__divsf3+0x18>
    1056:	cc c0       	rjmp	.+408    	; 0x11f0 <__fp_inf>
    1058:	51 11       	cpse	r21, r1
    105a:	15 c1       	rjmp	.+554    	; 0x1286 <__fp_szero>
    105c:	cf c0       	rjmp	.+414    	; 0x11fc <__fp_nan>

0000105e <__divsf3x>:
    105e:	f0 d0       	rcall	.+480    	; 0x1240 <__fp_split3>
    1060:	98 f3       	brcs	.-26     	; 0x1048 <__divsf3+0x4>

00001062 <__divsf3_pse>:
    1062:	99 23       	and	r25, r25
    1064:	c9 f3       	breq	.-14     	; 0x1058 <__divsf3+0x14>
    1066:	55 23       	and	r21, r21
    1068:	b1 f3       	breq	.-20     	; 0x1056 <__divsf3+0x12>
    106a:	95 1b       	sub	r25, r21
    106c:	55 0b       	sbc	r21, r21
    106e:	bb 27       	eor	r27, r27
    1070:	aa 27       	eor	r26, r26
    1072:	62 17       	cp	r22, r18
    1074:	73 07       	cpc	r23, r19
    1076:	84 07       	cpc	r24, r20
    1078:	38 f0       	brcs	.+14     	; 0x1088 <__divsf3_pse+0x26>
    107a:	9f 5f       	subi	r25, 0xFF	; 255
    107c:	5f 4f       	sbci	r21, 0xFF	; 255
    107e:	22 0f       	add	r18, r18
    1080:	33 1f       	adc	r19, r19
    1082:	44 1f       	adc	r20, r20
    1084:	aa 1f       	adc	r26, r26
    1086:	a9 f3       	breq	.-22     	; 0x1072 <__divsf3_pse+0x10>
    1088:	33 d0       	rcall	.+102    	; 0x10f0 <__divsf3_pse+0x8e>
    108a:	0e 2e       	mov	r0, r30
    108c:	3a f0       	brmi	.+14     	; 0x109c <__divsf3_pse+0x3a>
    108e:	e0 e8       	ldi	r30, 0x80	; 128
    1090:	30 d0       	rcall	.+96     	; 0x10f2 <__divsf3_pse+0x90>
    1092:	91 50       	subi	r25, 0x01	; 1
    1094:	50 40       	sbci	r21, 0x00	; 0
    1096:	e6 95       	lsr	r30
    1098:	00 1c       	adc	r0, r0
    109a:	ca f7       	brpl	.-14     	; 0x108e <__divsf3_pse+0x2c>
    109c:	29 d0       	rcall	.+82     	; 0x10f0 <__divsf3_pse+0x8e>
    109e:	fe 2f       	mov	r31, r30
    10a0:	27 d0       	rcall	.+78     	; 0x10f0 <__divsf3_pse+0x8e>
    10a2:	66 0f       	add	r22, r22
    10a4:	77 1f       	adc	r23, r23
    10a6:	88 1f       	adc	r24, r24
    10a8:	bb 1f       	adc	r27, r27
    10aa:	26 17       	cp	r18, r22
    10ac:	37 07       	cpc	r19, r23
    10ae:	48 07       	cpc	r20, r24
    10b0:	ab 07       	cpc	r26, r27
    10b2:	b0 e8       	ldi	r27, 0x80	; 128
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <__divsf3_pse+0x56>
    10b6:	bb 0b       	sbc	r27, r27
    10b8:	80 2d       	mov	r24, r0
    10ba:	bf 01       	movw	r22, r30
    10bc:	ff 27       	eor	r31, r31
    10be:	93 58       	subi	r25, 0x83	; 131
    10c0:	5f 4f       	sbci	r21, 0xFF	; 255
    10c2:	2a f0       	brmi	.+10     	; 0x10ce <__divsf3_pse+0x6c>
    10c4:	9e 3f       	cpi	r25, 0xFE	; 254
    10c6:	51 05       	cpc	r21, r1
    10c8:	68 f0       	brcs	.+26     	; 0x10e4 <__divsf3_pse+0x82>
    10ca:	92 c0       	rjmp	.+292    	; 0x11f0 <__fp_inf>
    10cc:	dc c0       	rjmp	.+440    	; 0x1286 <__fp_szero>
    10ce:	5f 3f       	cpi	r21, 0xFF	; 255
    10d0:	ec f3       	brlt	.-6      	; 0x10cc <__divsf3_pse+0x6a>
    10d2:	98 3e       	cpi	r25, 0xE8	; 232
    10d4:	dc f3       	brlt	.-10     	; 0x10cc <__divsf3_pse+0x6a>
    10d6:	86 95       	lsr	r24
    10d8:	77 95       	ror	r23
    10da:	67 95       	ror	r22
    10dc:	b7 95       	ror	r27
    10de:	f7 95       	ror	r31
    10e0:	9f 5f       	subi	r25, 0xFF	; 255
    10e2:	c9 f7       	brne	.-14     	; 0x10d6 <__divsf3_pse+0x74>
    10e4:	88 0f       	add	r24, r24
    10e6:	91 1d       	adc	r25, r1
    10e8:	96 95       	lsr	r25
    10ea:	87 95       	ror	r24
    10ec:	97 f9       	bld	r25, 7
    10ee:	08 95       	ret
    10f0:	e1 e0       	ldi	r30, 0x01	; 1
    10f2:	66 0f       	add	r22, r22
    10f4:	77 1f       	adc	r23, r23
    10f6:	88 1f       	adc	r24, r24
    10f8:	bb 1f       	adc	r27, r27
    10fa:	62 17       	cp	r22, r18
    10fc:	73 07       	cpc	r23, r19
    10fe:	84 07       	cpc	r24, r20
    1100:	ba 07       	cpc	r27, r26
    1102:	20 f0       	brcs	.+8      	; 0x110c <__stack+0xd>
    1104:	62 1b       	sub	r22, r18
    1106:	73 0b       	sbc	r23, r19
    1108:	84 0b       	sbc	r24, r20
    110a:	ba 0b       	sbc	r27, r26
    110c:	ee 1f       	adc	r30, r30
    110e:	88 f7       	brcc	.-30     	; 0x10f2 <__divsf3_pse+0x90>
    1110:	e0 95       	com	r30
    1112:	08 95       	ret

00001114 <__fixsfsi>:
    1114:	04 d0       	rcall	.+8      	; 0x111e <__fixunssfsi>
    1116:	68 94       	set
    1118:	b1 11       	cpse	r27, r1
    111a:	b5 c0       	rjmp	.+362    	; 0x1286 <__fp_szero>
    111c:	08 95       	ret

0000111e <__fixunssfsi>:
    111e:	98 d0       	rcall	.+304    	; 0x1250 <__fp_splitA>
    1120:	88 f0       	brcs	.+34     	; 0x1144 <__fixunssfsi+0x26>
    1122:	9f 57       	subi	r25, 0x7F	; 127
    1124:	90 f0       	brcs	.+36     	; 0x114a <__fixunssfsi+0x2c>
    1126:	b9 2f       	mov	r27, r25
    1128:	99 27       	eor	r25, r25
    112a:	b7 51       	subi	r27, 0x17	; 23
    112c:	a0 f0       	brcs	.+40     	; 0x1156 <__fixunssfsi+0x38>
    112e:	d1 f0       	breq	.+52     	; 0x1164 <__fixunssfsi+0x46>
    1130:	66 0f       	add	r22, r22
    1132:	77 1f       	adc	r23, r23
    1134:	88 1f       	adc	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	1a f0       	brmi	.+6      	; 0x1140 <__fixunssfsi+0x22>
    113a:	ba 95       	dec	r27
    113c:	c9 f7       	brne	.-14     	; 0x1130 <__fixunssfsi+0x12>
    113e:	12 c0       	rjmp	.+36     	; 0x1164 <__fixunssfsi+0x46>
    1140:	b1 30       	cpi	r27, 0x01	; 1
    1142:	81 f0       	breq	.+32     	; 0x1164 <__fixunssfsi+0x46>
    1144:	9f d0       	rcall	.+318    	; 0x1284 <__fp_zero>
    1146:	b1 e0       	ldi	r27, 0x01	; 1
    1148:	08 95       	ret
    114a:	9c c0       	rjmp	.+312    	; 0x1284 <__fp_zero>
    114c:	67 2f       	mov	r22, r23
    114e:	78 2f       	mov	r23, r24
    1150:	88 27       	eor	r24, r24
    1152:	b8 5f       	subi	r27, 0xF8	; 248
    1154:	39 f0       	breq	.+14     	; 0x1164 <__fixunssfsi+0x46>
    1156:	b9 3f       	cpi	r27, 0xF9	; 249
    1158:	cc f3       	brlt	.-14     	; 0x114c <__fixunssfsi+0x2e>
    115a:	86 95       	lsr	r24
    115c:	77 95       	ror	r23
    115e:	67 95       	ror	r22
    1160:	b3 95       	inc	r27
    1162:	d9 f7       	brne	.-10     	; 0x115a <__fixunssfsi+0x3c>
    1164:	3e f4       	brtc	.+14     	; 0x1174 <__fixunssfsi+0x56>
    1166:	90 95       	com	r25
    1168:	80 95       	com	r24
    116a:	70 95       	com	r23
    116c:	61 95       	neg	r22
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	8f 4f       	sbci	r24, 0xFF	; 255
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	08 95       	ret

00001176 <__floatunsisf>:
    1176:	e8 94       	clt
    1178:	09 c0       	rjmp	.+18     	; 0x118c <__floatsisf+0x12>

0000117a <__floatsisf>:
    117a:	97 fb       	bst	r25, 7
    117c:	3e f4       	brtc	.+14     	; 0x118c <__floatsisf+0x12>
    117e:	90 95       	com	r25
    1180:	80 95       	com	r24
    1182:	70 95       	com	r23
    1184:	61 95       	neg	r22
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
    1188:	8f 4f       	sbci	r24, 0xFF	; 255
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	99 23       	and	r25, r25
    118e:	a9 f0       	breq	.+42     	; 0x11ba <__floatsisf+0x40>
    1190:	f9 2f       	mov	r31, r25
    1192:	96 e9       	ldi	r25, 0x96	; 150
    1194:	bb 27       	eor	r27, r27
    1196:	93 95       	inc	r25
    1198:	f6 95       	lsr	r31
    119a:	87 95       	ror	r24
    119c:	77 95       	ror	r23
    119e:	67 95       	ror	r22
    11a0:	b7 95       	ror	r27
    11a2:	f1 11       	cpse	r31, r1
    11a4:	f8 cf       	rjmp	.-16     	; 0x1196 <__floatsisf+0x1c>
    11a6:	fa f4       	brpl	.+62     	; 0x11e6 <__floatsisf+0x6c>
    11a8:	bb 0f       	add	r27, r27
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <__floatsisf+0x36>
    11ac:	60 ff       	sbrs	r22, 0
    11ae:	1b c0       	rjmp	.+54     	; 0x11e6 <__floatsisf+0x6c>
    11b0:	6f 5f       	subi	r22, 0xFF	; 255
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	8f 4f       	sbci	r24, 0xFF	; 255
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	16 c0       	rjmp	.+44     	; 0x11e6 <__floatsisf+0x6c>
    11ba:	88 23       	and	r24, r24
    11bc:	11 f0       	breq	.+4      	; 0x11c2 <__floatsisf+0x48>
    11be:	96 e9       	ldi	r25, 0x96	; 150
    11c0:	11 c0       	rjmp	.+34     	; 0x11e4 <__floatsisf+0x6a>
    11c2:	77 23       	and	r23, r23
    11c4:	21 f0       	breq	.+8      	; 0x11ce <__floatsisf+0x54>
    11c6:	9e e8       	ldi	r25, 0x8E	; 142
    11c8:	87 2f       	mov	r24, r23
    11ca:	76 2f       	mov	r23, r22
    11cc:	05 c0       	rjmp	.+10     	; 0x11d8 <__floatsisf+0x5e>
    11ce:	66 23       	and	r22, r22
    11d0:	71 f0       	breq	.+28     	; 0x11ee <__floatsisf+0x74>
    11d2:	96 e8       	ldi	r25, 0x86	; 134
    11d4:	86 2f       	mov	r24, r22
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	2a f0       	brmi	.+10     	; 0x11e6 <__floatsisf+0x6c>
    11dc:	9a 95       	dec	r25
    11de:	66 0f       	add	r22, r22
    11e0:	77 1f       	adc	r23, r23
    11e2:	88 1f       	adc	r24, r24
    11e4:	da f7       	brpl	.-10     	; 0x11dc <__floatsisf+0x62>
    11e6:	88 0f       	add	r24, r24
    11e8:	96 95       	lsr	r25
    11ea:	87 95       	ror	r24
    11ec:	97 f9       	bld	r25, 7
    11ee:	08 95       	ret

000011f0 <__fp_inf>:
    11f0:	97 f9       	bld	r25, 7
    11f2:	9f 67       	ori	r25, 0x7F	; 127
    11f4:	80 e8       	ldi	r24, 0x80	; 128
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	08 95       	ret

000011fc <__fp_nan>:
    11fc:	9f ef       	ldi	r25, 0xFF	; 255
    11fe:	80 ec       	ldi	r24, 0xC0	; 192
    1200:	08 95       	ret

00001202 <__fp_pscA>:
    1202:	00 24       	eor	r0, r0
    1204:	0a 94       	dec	r0
    1206:	16 16       	cp	r1, r22
    1208:	17 06       	cpc	r1, r23
    120a:	18 06       	cpc	r1, r24
    120c:	09 06       	cpc	r0, r25
    120e:	08 95       	ret

00001210 <__fp_pscB>:
    1210:	00 24       	eor	r0, r0
    1212:	0a 94       	dec	r0
    1214:	12 16       	cp	r1, r18
    1216:	13 06       	cpc	r1, r19
    1218:	14 06       	cpc	r1, r20
    121a:	05 06       	cpc	r0, r21
    121c:	08 95       	ret

0000121e <__fp_round>:
    121e:	09 2e       	mov	r0, r25
    1220:	03 94       	inc	r0
    1222:	00 0c       	add	r0, r0
    1224:	11 f4       	brne	.+4      	; 0x122a <__fp_round+0xc>
    1226:	88 23       	and	r24, r24
    1228:	52 f0       	brmi	.+20     	; 0x123e <__fp_round+0x20>
    122a:	bb 0f       	add	r27, r27
    122c:	40 f4       	brcc	.+16     	; 0x123e <__fp_round+0x20>
    122e:	bf 2b       	or	r27, r31
    1230:	11 f4       	brne	.+4      	; 0x1236 <__fp_round+0x18>
    1232:	60 ff       	sbrs	r22, 0
    1234:	04 c0       	rjmp	.+8      	; 0x123e <__fp_round+0x20>
    1236:	6f 5f       	subi	r22, 0xFF	; 255
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	8f 4f       	sbci	r24, 0xFF	; 255
    123c:	9f 4f       	sbci	r25, 0xFF	; 255
    123e:	08 95       	ret

00001240 <__fp_split3>:
    1240:	57 fd       	sbrc	r21, 7
    1242:	90 58       	subi	r25, 0x80	; 128
    1244:	44 0f       	add	r20, r20
    1246:	55 1f       	adc	r21, r21
    1248:	59 f0       	breq	.+22     	; 0x1260 <__fp_splitA+0x10>
    124a:	5f 3f       	cpi	r21, 0xFF	; 255
    124c:	71 f0       	breq	.+28     	; 0x126a <__fp_splitA+0x1a>
    124e:	47 95       	ror	r20

00001250 <__fp_splitA>:
    1250:	88 0f       	add	r24, r24
    1252:	97 fb       	bst	r25, 7
    1254:	99 1f       	adc	r25, r25
    1256:	61 f0       	breq	.+24     	; 0x1270 <__fp_splitA+0x20>
    1258:	9f 3f       	cpi	r25, 0xFF	; 255
    125a:	79 f0       	breq	.+30     	; 0x127a <__fp_splitA+0x2a>
    125c:	87 95       	ror	r24
    125e:	08 95       	ret
    1260:	12 16       	cp	r1, r18
    1262:	13 06       	cpc	r1, r19
    1264:	14 06       	cpc	r1, r20
    1266:	55 1f       	adc	r21, r21
    1268:	f2 cf       	rjmp	.-28     	; 0x124e <__fp_split3+0xe>
    126a:	46 95       	lsr	r20
    126c:	f1 df       	rcall	.-30     	; 0x1250 <__fp_splitA>
    126e:	08 c0       	rjmp	.+16     	; 0x1280 <__fp_splitA+0x30>
    1270:	16 16       	cp	r1, r22
    1272:	17 06       	cpc	r1, r23
    1274:	18 06       	cpc	r1, r24
    1276:	99 1f       	adc	r25, r25
    1278:	f1 cf       	rjmp	.-30     	; 0x125c <__fp_splitA+0xc>
    127a:	86 95       	lsr	r24
    127c:	71 05       	cpc	r23, r1
    127e:	61 05       	cpc	r22, r1
    1280:	08 94       	sec
    1282:	08 95       	ret

00001284 <__fp_zero>:
    1284:	e8 94       	clt

00001286 <__fp_szero>:
    1286:	bb 27       	eor	r27, r27
    1288:	66 27       	eor	r22, r22
    128a:	77 27       	eor	r23, r23
    128c:	cb 01       	movw	r24, r22
    128e:	97 f9       	bld	r25, 7
    1290:	08 95       	ret

00001292 <__mulsf3>:
    1292:	0b d0       	rcall	.+22     	; 0x12aa <__mulsf3x>
    1294:	c4 cf       	rjmp	.-120    	; 0x121e <__fp_round>
    1296:	b5 df       	rcall	.-150    	; 0x1202 <__fp_pscA>
    1298:	28 f0       	brcs	.+10     	; 0x12a4 <__mulsf3+0x12>
    129a:	ba df       	rcall	.-140    	; 0x1210 <__fp_pscB>
    129c:	18 f0       	brcs	.+6      	; 0x12a4 <__mulsf3+0x12>
    129e:	95 23       	and	r25, r21
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <__mulsf3+0x12>
    12a2:	a6 cf       	rjmp	.-180    	; 0x11f0 <__fp_inf>
    12a4:	ab cf       	rjmp	.-170    	; 0x11fc <__fp_nan>
    12a6:	11 24       	eor	r1, r1
    12a8:	ee cf       	rjmp	.-36     	; 0x1286 <__fp_szero>

000012aa <__mulsf3x>:
    12aa:	ca df       	rcall	.-108    	; 0x1240 <__fp_split3>
    12ac:	a0 f3       	brcs	.-24     	; 0x1296 <__mulsf3+0x4>

000012ae <__mulsf3_pse>:
    12ae:	95 9f       	mul	r25, r21
    12b0:	d1 f3       	breq	.-12     	; 0x12a6 <__mulsf3+0x14>
    12b2:	95 0f       	add	r25, r21
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	55 1f       	adc	r21, r21
    12b8:	62 9f       	mul	r22, r18
    12ba:	f0 01       	movw	r30, r0
    12bc:	72 9f       	mul	r23, r18
    12be:	bb 27       	eor	r27, r27
    12c0:	f0 0d       	add	r31, r0
    12c2:	b1 1d       	adc	r27, r1
    12c4:	63 9f       	mul	r22, r19
    12c6:	aa 27       	eor	r26, r26
    12c8:	f0 0d       	add	r31, r0
    12ca:	b1 1d       	adc	r27, r1
    12cc:	aa 1f       	adc	r26, r26
    12ce:	64 9f       	mul	r22, r20
    12d0:	66 27       	eor	r22, r22
    12d2:	b0 0d       	add	r27, r0
    12d4:	a1 1d       	adc	r26, r1
    12d6:	66 1f       	adc	r22, r22
    12d8:	82 9f       	mul	r24, r18
    12da:	22 27       	eor	r18, r18
    12dc:	b0 0d       	add	r27, r0
    12de:	a1 1d       	adc	r26, r1
    12e0:	62 1f       	adc	r22, r18
    12e2:	73 9f       	mul	r23, r19
    12e4:	b0 0d       	add	r27, r0
    12e6:	a1 1d       	adc	r26, r1
    12e8:	62 1f       	adc	r22, r18
    12ea:	83 9f       	mul	r24, r19
    12ec:	a0 0d       	add	r26, r0
    12ee:	61 1d       	adc	r22, r1
    12f0:	22 1f       	adc	r18, r18
    12f2:	74 9f       	mul	r23, r20
    12f4:	33 27       	eor	r19, r19
    12f6:	a0 0d       	add	r26, r0
    12f8:	61 1d       	adc	r22, r1
    12fa:	23 1f       	adc	r18, r19
    12fc:	84 9f       	mul	r24, r20
    12fe:	60 0d       	add	r22, r0
    1300:	21 1d       	adc	r18, r1
    1302:	82 2f       	mov	r24, r18
    1304:	76 2f       	mov	r23, r22
    1306:	6a 2f       	mov	r22, r26
    1308:	11 24       	eor	r1, r1
    130a:	9f 57       	subi	r25, 0x7F	; 127
    130c:	50 40       	sbci	r21, 0x00	; 0
    130e:	8a f0       	brmi	.+34     	; 0x1332 <__mulsf3_pse+0x84>
    1310:	e1 f0       	breq	.+56     	; 0x134a <__mulsf3_pse+0x9c>
    1312:	88 23       	and	r24, r24
    1314:	4a f0       	brmi	.+18     	; 0x1328 <__mulsf3_pse+0x7a>
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	bb 1f       	adc	r27, r27
    131c:	66 1f       	adc	r22, r22
    131e:	77 1f       	adc	r23, r23
    1320:	88 1f       	adc	r24, r24
    1322:	91 50       	subi	r25, 0x01	; 1
    1324:	50 40       	sbci	r21, 0x00	; 0
    1326:	a9 f7       	brne	.-22     	; 0x1312 <__mulsf3_pse+0x64>
    1328:	9e 3f       	cpi	r25, 0xFE	; 254
    132a:	51 05       	cpc	r21, r1
    132c:	70 f0       	brcs	.+28     	; 0x134a <__mulsf3_pse+0x9c>
    132e:	60 cf       	rjmp	.-320    	; 0x11f0 <__fp_inf>
    1330:	aa cf       	rjmp	.-172    	; 0x1286 <__fp_szero>
    1332:	5f 3f       	cpi	r21, 0xFF	; 255
    1334:	ec f3       	brlt	.-6      	; 0x1330 <__mulsf3_pse+0x82>
    1336:	98 3e       	cpi	r25, 0xE8	; 232
    1338:	dc f3       	brlt	.-10     	; 0x1330 <__mulsf3_pse+0x82>
    133a:	86 95       	lsr	r24
    133c:	77 95       	ror	r23
    133e:	67 95       	ror	r22
    1340:	b7 95       	ror	r27
    1342:	f7 95       	ror	r31
    1344:	e7 95       	ror	r30
    1346:	9f 5f       	subi	r25, 0xFF	; 255
    1348:	c1 f7       	brne	.-16     	; 0x133a <__mulsf3_pse+0x8c>
    134a:	fe 2b       	or	r31, r30
    134c:	88 0f       	add	r24, r24
    134e:	91 1d       	adc	r25, r1
    1350:	96 95       	lsr	r25
    1352:	87 95       	ror	r24
    1354:	97 f9       	bld	r25, 7
    1356:	08 95       	ret

00001358 <__udivmodhi4>:
    1358:	aa 1b       	sub	r26, r26
    135a:	bb 1b       	sub	r27, r27
    135c:	51 e1       	ldi	r21, 0x11	; 17
    135e:	07 c0       	rjmp	.+14     	; 0x136e <__udivmodhi4_ep>

00001360 <__udivmodhi4_loop>:
    1360:	aa 1f       	adc	r26, r26
    1362:	bb 1f       	adc	r27, r27
    1364:	a6 17       	cp	r26, r22
    1366:	b7 07       	cpc	r27, r23
    1368:	10 f0       	brcs	.+4      	; 0x136e <__udivmodhi4_ep>
    136a:	a6 1b       	sub	r26, r22
    136c:	b7 0b       	sbc	r27, r23

0000136e <__udivmodhi4_ep>:
    136e:	88 1f       	adc	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	5a 95       	dec	r21
    1374:	a9 f7       	brne	.-22     	; 0x1360 <__udivmodhi4_loop>
    1376:	80 95       	com	r24
    1378:	90 95       	com	r25
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	08 95       	ret

00001380 <__divmodhi4>:
    1380:	97 fb       	bst	r25, 7
    1382:	07 2e       	mov	r0, r23
    1384:	16 f4       	brtc	.+4      	; 0x138a <__divmodhi4+0xa>
    1386:	00 94       	com	r0
    1388:	06 d0       	rcall	.+12     	; 0x1396 <__divmodhi4_neg1>
    138a:	77 fd       	sbrc	r23, 7
    138c:	08 d0       	rcall	.+16     	; 0x139e <__divmodhi4_neg2>
    138e:	e4 df       	rcall	.-56     	; 0x1358 <__udivmodhi4>
    1390:	07 fc       	sbrc	r0, 7
    1392:	05 d0       	rcall	.+10     	; 0x139e <__divmodhi4_neg2>
    1394:	3e f4       	brtc	.+14     	; 0x13a4 <__divmodhi4_exit>

00001396 <__divmodhi4_neg1>:
    1396:	90 95       	com	r25
    1398:	81 95       	neg	r24
    139a:	9f 4f       	sbci	r25, 0xFF	; 255
    139c:	08 95       	ret

0000139e <__divmodhi4_neg2>:
    139e:	70 95       	com	r23
    13a0:	61 95       	neg	r22
    13a2:	7f 4f       	sbci	r23, 0xFF	; 255

000013a4 <__divmodhi4_exit>:
    13a4:	08 95       	ret

000013a6 <__tablejump2__>:
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	00 24       	eor	r0, r0
    13ac:	00 1c       	adc	r0, r0
    13ae:	0b be       	out	0x3b, r0	; 59
    13b0:	07 90       	elpm	r0, Z+
    13b2:	f6 91       	elpm	r31, Z
    13b4:	e0 2d       	mov	r30, r0
    13b6:	09 94       	ijmp

000013b8 <sprintf>:
    13b8:	0f 93       	push	r16
    13ba:	1f 93       	push	r17
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	2e 97       	sbiw	r28, 0x0e	; 14
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	0d 89       	ldd	r16, Y+21	; 0x15
    13d2:	1e 89       	ldd	r17, Y+22	; 0x16
    13d4:	86 e0       	ldi	r24, 0x06	; 6
    13d6:	8c 83       	std	Y+4, r24	; 0x04
    13d8:	1a 83       	std	Y+2, r17	; 0x02
    13da:	09 83       	std	Y+1, r16	; 0x01
    13dc:	8f ef       	ldi	r24, 0xFF	; 255
    13de:	9f e7       	ldi	r25, 0x7F	; 127
    13e0:	9e 83       	std	Y+6, r25	; 0x06
    13e2:	8d 83       	std	Y+5, r24	; 0x05
    13e4:	ae 01       	movw	r20, r28
    13e6:	47 5e       	subi	r20, 0xE7	; 231
    13e8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ea:	6f 89       	ldd	r22, Y+23	; 0x17
    13ec:	78 8d       	ldd	r23, Y+24	; 0x18
    13ee:	ce 01       	movw	r24, r28
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	10 d0       	rcall	.+32     	; 0x1414 <vfprintf>
    13f4:	ef 81       	ldd	r30, Y+7	; 0x07
    13f6:	f8 85       	ldd	r31, Y+8	; 0x08
    13f8:	e0 0f       	add	r30, r16
    13fa:	f1 1f       	adc	r31, r17
    13fc:	10 82       	st	Z, r1
    13fe:	2e 96       	adiw	r28, 0x0e	; 14
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	08 95       	ret

00001414 <vfprintf>:
    1414:	2f 92       	push	r2
    1416:	3f 92       	push	r3
    1418:	4f 92       	push	r4
    141a:	5f 92       	push	r5
    141c:	6f 92       	push	r6
    141e:	7f 92       	push	r7
    1420:	8f 92       	push	r8
    1422:	9f 92       	push	r9
    1424:	af 92       	push	r10
    1426:	bf 92       	push	r11
    1428:	cf 92       	push	r12
    142a:	df 92       	push	r13
    142c:	ef 92       	push	r14
    142e:	ff 92       	push	r15
    1430:	0f 93       	push	r16
    1432:	1f 93       	push	r17
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	2b 97       	sbiw	r28, 0x0b	; 11
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	6c 01       	movw	r12, r24
    144a:	7b 01       	movw	r14, r22
    144c:	8a 01       	movw	r16, r20
    144e:	fc 01       	movw	r30, r24
    1450:	17 82       	std	Z+7, r1	; 0x07
    1452:	16 82       	std	Z+6, r1	; 0x06
    1454:	83 81       	ldd	r24, Z+3	; 0x03
    1456:	81 ff       	sbrs	r24, 1
    1458:	bf c1       	rjmp	.+894    	; 0x17d8 <vfprintf+0x3c4>
    145a:	ce 01       	movw	r24, r28
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	3c 01       	movw	r6, r24
    1460:	f6 01       	movw	r30, r12
    1462:	93 81       	ldd	r25, Z+3	; 0x03
    1464:	f7 01       	movw	r30, r14
    1466:	93 fd       	sbrc	r25, 3
    1468:	85 91       	lpm	r24, Z+
    146a:	93 ff       	sbrs	r25, 3
    146c:	81 91       	ld	r24, Z+
    146e:	7f 01       	movw	r14, r30
    1470:	88 23       	and	r24, r24
    1472:	09 f4       	brne	.+2      	; 0x1476 <vfprintf+0x62>
    1474:	ad c1       	rjmp	.+858    	; 0x17d0 <vfprintf+0x3bc>
    1476:	85 32       	cpi	r24, 0x25	; 37
    1478:	39 f4       	brne	.+14     	; 0x1488 <vfprintf+0x74>
    147a:	93 fd       	sbrc	r25, 3
    147c:	85 91       	lpm	r24, Z+
    147e:	93 ff       	sbrs	r25, 3
    1480:	81 91       	ld	r24, Z+
    1482:	7f 01       	movw	r14, r30
    1484:	85 32       	cpi	r24, 0x25	; 37
    1486:	21 f4       	brne	.+8      	; 0x1490 <vfprintf+0x7c>
    1488:	b6 01       	movw	r22, r12
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	d6 d1       	rcall	.+940    	; 0x183a <fputc>
    148e:	e8 cf       	rjmp	.-48     	; 0x1460 <vfprintf+0x4c>
    1490:	91 2c       	mov	r9, r1
    1492:	21 2c       	mov	r2, r1
    1494:	31 2c       	mov	r3, r1
    1496:	ff e1       	ldi	r31, 0x1F	; 31
    1498:	f3 15       	cp	r31, r3
    149a:	d8 f0       	brcs	.+54     	; 0x14d2 <vfprintf+0xbe>
    149c:	8b 32       	cpi	r24, 0x2B	; 43
    149e:	79 f0       	breq	.+30     	; 0x14be <vfprintf+0xaa>
    14a0:	38 f4       	brcc	.+14     	; 0x14b0 <vfprintf+0x9c>
    14a2:	80 32       	cpi	r24, 0x20	; 32
    14a4:	79 f0       	breq	.+30     	; 0x14c4 <vfprintf+0xb0>
    14a6:	83 32       	cpi	r24, 0x23	; 35
    14a8:	a1 f4       	brne	.+40     	; 0x14d2 <vfprintf+0xbe>
    14aa:	23 2d       	mov	r18, r3
    14ac:	20 61       	ori	r18, 0x10	; 16
    14ae:	1d c0       	rjmp	.+58     	; 0x14ea <vfprintf+0xd6>
    14b0:	8d 32       	cpi	r24, 0x2D	; 45
    14b2:	61 f0       	breq	.+24     	; 0x14cc <vfprintf+0xb8>
    14b4:	80 33       	cpi	r24, 0x30	; 48
    14b6:	69 f4       	brne	.+26     	; 0x14d2 <vfprintf+0xbe>
    14b8:	23 2d       	mov	r18, r3
    14ba:	21 60       	ori	r18, 0x01	; 1
    14bc:	16 c0       	rjmp	.+44     	; 0x14ea <vfprintf+0xd6>
    14be:	83 2d       	mov	r24, r3
    14c0:	82 60       	ori	r24, 0x02	; 2
    14c2:	38 2e       	mov	r3, r24
    14c4:	e3 2d       	mov	r30, r3
    14c6:	e4 60       	ori	r30, 0x04	; 4
    14c8:	3e 2e       	mov	r3, r30
    14ca:	2a c0       	rjmp	.+84     	; 0x1520 <vfprintf+0x10c>
    14cc:	f3 2d       	mov	r31, r3
    14ce:	f8 60       	ori	r31, 0x08	; 8
    14d0:	1d c0       	rjmp	.+58     	; 0x150c <vfprintf+0xf8>
    14d2:	37 fc       	sbrc	r3, 7
    14d4:	2d c0       	rjmp	.+90     	; 0x1530 <vfprintf+0x11c>
    14d6:	20 ed       	ldi	r18, 0xD0	; 208
    14d8:	28 0f       	add	r18, r24
    14da:	2a 30       	cpi	r18, 0x0A	; 10
    14dc:	40 f0       	brcs	.+16     	; 0x14ee <vfprintf+0xda>
    14de:	8e 32       	cpi	r24, 0x2E	; 46
    14e0:	b9 f4       	brne	.+46     	; 0x1510 <vfprintf+0xfc>
    14e2:	36 fc       	sbrc	r3, 6
    14e4:	75 c1       	rjmp	.+746    	; 0x17d0 <vfprintf+0x3bc>
    14e6:	23 2d       	mov	r18, r3
    14e8:	20 64       	ori	r18, 0x40	; 64
    14ea:	32 2e       	mov	r3, r18
    14ec:	19 c0       	rjmp	.+50     	; 0x1520 <vfprintf+0x10c>
    14ee:	36 fe       	sbrs	r3, 6
    14f0:	06 c0       	rjmp	.+12     	; 0x14fe <vfprintf+0xea>
    14f2:	8a e0       	ldi	r24, 0x0A	; 10
    14f4:	98 9e       	mul	r9, r24
    14f6:	20 0d       	add	r18, r0
    14f8:	11 24       	eor	r1, r1
    14fa:	92 2e       	mov	r9, r18
    14fc:	11 c0       	rjmp	.+34     	; 0x1520 <vfprintf+0x10c>
    14fe:	ea e0       	ldi	r30, 0x0A	; 10
    1500:	2e 9e       	mul	r2, r30
    1502:	20 0d       	add	r18, r0
    1504:	11 24       	eor	r1, r1
    1506:	22 2e       	mov	r2, r18
    1508:	f3 2d       	mov	r31, r3
    150a:	f0 62       	ori	r31, 0x20	; 32
    150c:	3f 2e       	mov	r3, r31
    150e:	08 c0       	rjmp	.+16     	; 0x1520 <vfprintf+0x10c>
    1510:	8c 36       	cpi	r24, 0x6C	; 108
    1512:	21 f4       	brne	.+8      	; 0x151c <vfprintf+0x108>
    1514:	83 2d       	mov	r24, r3
    1516:	80 68       	ori	r24, 0x80	; 128
    1518:	38 2e       	mov	r3, r24
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <vfprintf+0x10c>
    151c:	88 36       	cpi	r24, 0x68	; 104
    151e:	41 f4       	brne	.+16     	; 0x1530 <vfprintf+0x11c>
    1520:	f7 01       	movw	r30, r14
    1522:	93 fd       	sbrc	r25, 3
    1524:	85 91       	lpm	r24, Z+
    1526:	93 ff       	sbrs	r25, 3
    1528:	81 91       	ld	r24, Z+
    152a:	7f 01       	movw	r14, r30
    152c:	81 11       	cpse	r24, r1
    152e:	b3 cf       	rjmp	.-154    	; 0x1496 <vfprintf+0x82>
    1530:	98 2f       	mov	r25, r24
    1532:	9f 7d       	andi	r25, 0xDF	; 223
    1534:	95 54       	subi	r25, 0x45	; 69
    1536:	93 30       	cpi	r25, 0x03	; 3
    1538:	28 f4       	brcc	.+10     	; 0x1544 <vfprintf+0x130>
    153a:	0c 5f       	subi	r16, 0xFC	; 252
    153c:	1f 4f       	sbci	r17, 0xFF	; 255
    153e:	9f e3       	ldi	r25, 0x3F	; 63
    1540:	99 83       	std	Y+1, r25	; 0x01
    1542:	0d c0       	rjmp	.+26     	; 0x155e <vfprintf+0x14a>
    1544:	83 36       	cpi	r24, 0x63	; 99
    1546:	31 f0       	breq	.+12     	; 0x1554 <vfprintf+0x140>
    1548:	83 37       	cpi	r24, 0x73	; 115
    154a:	71 f0       	breq	.+28     	; 0x1568 <vfprintf+0x154>
    154c:	83 35       	cpi	r24, 0x53	; 83
    154e:	09 f0       	breq	.+2      	; 0x1552 <vfprintf+0x13e>
    1550:	55 c0       	rjmp	.+170    	; 0x15fc <vfprintf+0x1e8>
    1552:	20 c0       	rjmp	.+64     	; 0x1594 <vfprintf+0x180>
    1554:	f8 01       	movw	r30, r16
    1556:	80 81       	ld	r24, Z
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	0e 5f       	subi	r16, 0xFE	; 254
    155c:	1f 4f       	sbci	r17, 0xFF	; 255
    155e:	88 24       	eor	r8, r8
    1560:	83 94       	inc	r8
    1562:	91 2c       	mov	r9, r1
    1564:	53 01       	movw	r10, r6
    1566:	12 c0       	rjmp	.+36     	; 0x158c <vfprintf+0x178>
    1568:	28 01       	movw	r4, r16
    156a:	f2 e0       	ldi	r31, 0x02	; 2
    156c:	4f 0e       	add	r4, r31
    156e:	51 1c       	adc	r5, r1
    1570:	f8 01       	movw	r30, r16
    1572:	a0 80       	ld	r10, Z
    1574:	b1 80       	ldd	r11, Z+1	; 0x01
    1576:	36 fe       	sbrs	r3, 6
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <vfprintf+0x16c>
    157a:	69 2d       	mov	r22, r9
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <vfprintf+0x170>
    1580:	6f ef       	ldi	r22, 0xFF	; 255
    1582:	7f ef       	ldi	r23, 0xFF	; 255
    1584:	c5 01       	movw	r24, r10
    1586:	4e d1       	rcall	.+668    	; 0x1824 <strnlen>
    1588:	4c 01       	movw	r8, r24
    158a:	82 01       	movw	r16, r4
    158c:	f3 2d       	mov	r31, r3
    158e:	ff 77       	andi	r31, 0x7F	; 127
    1590:	3f 2e       	mov	r3, r31
    1592:	15 c0       	rjmp	.+42     	; 0x15be <vfprintf+0x1aa>
    1594:	28 01       	movw	r4, r16
    1596:	22 e0       	ldi	r18, 0x02	; 2
    1598:	42 0e       	add	r4, r18
    159a:	51 1c       	adc	r5, r1
    159c:	f8 01       	movw	r30, r16
    159e:	a0 80       	ld	r10, Z
    15a0:	b1 80       	ldd	r11, Z+1	; 0x01
    15a2:	36 fe       	sbrs	r3, 6
    15a4:	03 c0       	rjmp	.+6      	; 0x15ac <vfprintf+0x198>
    15a6:	69 2d       	mov	r22, r9
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <vfprintf+0x19c>
    15ac:	6f ef       	ldi	r22, 0xFF	; 255
    15ae:	7f ef       	ldi	r23, 0xFF	; 255
    15b0:	c5 01       	movw	r24, r10
    15b2:	2d d1       	rcall	.+602    	; 0x180e <strnlen_P>
    15b4:	4c 01       	movw	r8, r24
    15b6:	f3 2d       	mov	r31, r3
    15b8:	f0 68       	ori	r31, 0x80	; 128
    15ba:	3f 2e       	mov	r3, r31
    15bc:	82 01       	movw	r16, r4
    15be:	33 fc       	sbrc	r3, 3
    15c0:	19 c0       	rjmp	.+50     	; 0x15f4 <vfprintf+0x1e0>
    15c2:	82 2d       	mov	r24, r2
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	88 16       	cp	r8, r24
    15c8:	99 06       	cpc	r9, r25
    15ca:	a0 f4       	brcc	.+40     	; 0x15f4 <vfprintf+0x1e0>
    15cc:	b6 01       	movw	r22, r12
    15ce:	80 e2       	ldi	r24, 0x20	; 32
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	33 d1       	rcall	.+614    	; 0x183a <fputc>
    15d4:	2a 94       	dec	r2
    15d6:	f5 cf       	rjmp	.-22     	; 0x15c2 <vfprintf+0x1ae>
    15d8:	f5 01       	movw	r30, r10
    15da:	37 fc       	sbrc	r3, 7
    15dc:	85 91       	lpm	r24, Z+
    15de:	37 fe       	sbrs	r3, 7
    15e0:	81 91       	ld	r24, Z+
    15e2:	5f 01       	movw	r10, r30
    15e4:	b6 01       	movw	r22, r12
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	28 d1       	rcall	.+592    	; 0x183a <fputc>
    15ea:	21 10       	cpse	r2, r1
    15ec:	2a 94       	dec	r2
    15ee:	21 e0       	ldi	r18, 0x01	; 1
    15f0:	82 1a       	sub	r8, r18
    15f2:	91 08       	sbc	r9, r1
    15f4:	81 14       	cp	r8, r1
    15f6:	91 04       	cpc	r9, r1
    15f8:	79 f7       	brne	.-34     	; 0x15d8 <vfprintf+0x1c4>
    15fa:	e1 c0       	rjmp	.+450    	; 0x17be <vfprintf+0x3aa>
    15fc:	84 36       	cpi	r24, 0x64	; 100
    15fe:	11 f0       	breq	.+4      	; 0x1604 <vfprintf+0x1f0>
    1600:	89 36       	cpi	r24, 0x69	; 105
    1602:	39 f5       	brne	.+78     	; 0x1652 <vfprintf+0x23e>
    1604:	f8 01       	movw	r30, r16
    1606:	37 fe       	sbrs	r3, 7
    1608:	07 c0       	rjmp	.+14     	; 0x1618 <vfprintf+0x204>
    160a:	60 81       	ld	r22, Z
    160c:	71 81       	ldd	r23, Z+1	; 0x01
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	0c 5f       	subi	r16, 0xFC	; 252
    1614:	1f 4f       	sbci	r17, 0xFF	; 255
    1616:	08 c0       	rjmp	.+16     	; 0x1628 <vfprintf+0x214>
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	07 2e       	mov	r0, r23
    161e:	00 0c       	add	r0, r0
    1620:	88 0b       	sbc	r24, r24
    1622:	99 0b       	sbc	r25, r25
    1624:	0e 5f       	subi	r16, 0xFE	; 254
    1626:	1f 4f       	sbci	r17, 0xFF	; 255
    1628:	f3 2d       	mov	r31, r3
    162a:	ff 76       	andi	r31, 0x6F	; 111
    162c:	3f 2e       	mov	r3, r31
    162e:	97 ff       	sbrs	r25, 7
    1630:	09 c0       	rjmp	.+18     	; 0x1644 <vfprintf+0x230>
    1632:	90 95       	com	r25
    1634:	80 95       	com	r24
    1636:	70 95       	com	r23
    1638:	61 95       	neg	r22
    163a:	7f 4f       	sbci	r23, 0xFF	; 255
    163c:	8f 4f       	sbci	r24, 0xFF	; 255
    163e:	9f 4f       	sbci	r25, 0xFF	; 255
    1640:	f0 68       	ori	r31, 0x80	; 128
    1642:	3f 2e       	mov	r3, r31
    1644:	2a e0       	ldi	r18, 0x0A	; 10
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	a3 01       	movw	r20, r6
    164a:	33 d1       	rcall	.+614    	; 0x18b2 <__ultoa_invert>
    164c:	88 2e       	mov	r8, r24
    164e:	86 18       	sub	r8, r6
    1650:	44 c0       	rjmp	.+136    	; 0x16da <vfprintf+0x2c6>
    1652:	85 37       	cpi	r24, 0x75	; 117
    1654:	31 f4       	brne	.+12     	; 0x1662 <vfprintf+0x24e>
    1656:	23 2d       	mov	r18, r3
    1658:	2f 7e       	andi	r18, 0xEF	; 239
    165a:	b2 2e       	mov	r11, r18
    165c:	2a e0       	ldi	r18, 0x0A	; 10
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	25 c0       	rjmp	.+74     	; 0x16ac <vfprintf+0x298>
    1662:	93 2d       	mov	r25, r3
    1664:	99 7f       	andi	r25, 0xF9	; 249
    1666:	b9 2e       	mov	r11, r25
    1668:	8f 36       	cpi	r24, 0x6F	; 111
    166a:	c1 f0       	breq	.+48     	; 0x169c <vfprintf+0x288>
    166c:	18 f4       	brcc	.+6      	; 0x1674 <vfprintf+0x260>
    166e:	88 35       	cpi	r24, 0x58	; 88
    1670:	79 f0       	breq	.+30     	; 0x1690 <vfprintf+0x27c>
    1672:	ae c0       	rjmp	.+348    	; 0x17d0 <vfprintf+0x3bc>
    1674:	80 37       	cpi	r24, 0x70	; 112
    1676:	19 f0       	breq	.+6      	; 0x167e <vfprintf+0x26a>
    1678:	88 37       	cpi	r24, 0x78	; 120
    167a:	21 f0       	breq	.+8      	; 0x1684 <vfprintf+0x270>
    167c:	a9 c0       	rjmp	.+338    	; 0x17d0 <vfprintf+0x3bc>
    167e:	e9 2f       	mov	r30, r25
    1680:	e0 61       	ori	r30, 0x10	; 16
    1682:	be 2e       	mov	r11, r30
    1684:	b4 fe       	sbrs	r11, 4
    1686:	0d c0       	rjmp	.+26     	; 0x16a2 <vfprintf+0x28e>
    1688:	fb 2d       	mov	r31, r11
    168a:	f4 60       	ori	r31, 0x04	; 4
    168c:	bf 2e       	mov	r11, r31
    168e:	09 c0       	rjmp	.+18     	; 0x16a2 <vfprintf+0x28e>
    1690:	34 fe       	sbrs	r3, 4
    1692:	0a c0       	rjmp	.+20     	; 0x16a8 <vfprintf+0x294>
    1694:	29 2f       	mov	r18, r25
    1696:	26 60       	ori	r18, 0x06	; 6
    1698:	b2 2e       	mov	r11, r18
    169a:	06 c0       	rjmp	.+12     	; 0x16a8 <vfprintf+0x294>
    169c:	28 e0       	ldi	r18, 0x08	; 8
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	05 c0       	rjmp	.+10     	; 0x16ac <vfprintf+0x298>
    16a2:	20 e1       	ldi	r18, 0x10	; 16
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <vfprintf+0x298>
    16a8:	20 e1       	ldi	r18, 0x10	; 16
    16aa:	32 e0       	ldi	r19, 0x02	; 2
    16ac:	f8 01       	movw	r30, r16
    16ae:	b7 fe       	sbrs	r11, 7
    16b0:	07 c0       	rjmp	.+14     	; 0x16c0 <vfprintf+0x2ac>
    16b2:	60 81       	ld	r22, Z
    16b4:	71 81       	ldd	r23, Z+1	; 0x01
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	93 81       	ldd	r25, Z+3	; 0x03
    16ba:	0c 5f       	subi	r16, 0xFC	; 252
    16bc:	1f 4f       	sbci	r17, 0xFF	; 255
    16be:	06 c0       	rjmp	.+12     	; 0x16cc <vfprintf+0x2b8>
    16c0:	60 81       	ld	r22, Z
    16c2:	71 81       	ldd	r23, Z+1	; 0x01
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	0e 5f       	subi	r16, 0xFE	; 254
    16ca:	1f 4f       	sbci	r17, 0xFF	; 255
    16cc:	a3 01       	movw	r20, r6
    16ce:	f1 d0       	rcall	.+482    	; 0x18b2 <__ultoa_invert>
    16d0:	88 2e       	mov	r8, r24
    16d2:	86 18       	sub	r8, r6
    16d4:	fb 2d       	mov	r31, r11
    16d6:	ff 77       	andi	r31, 0x7F	; 127
    16d8:	3f 2e       	mov	r3, r31
    16da:	36 fe       	sbrs	r3, 6
    16dc:	0d c0       	rjmp	.+26     	; 0x16f8 <vfprintf+0x2e4>
    16de:	23 2d       	mov	r18, r3
    16e0:	2e 7f       	andi	r18, 0xFE	; 254
    16e2:	a2 2e       	mov	r10, r18
    16e4:	89 14       	cp	r8, r9
    16e6:	58 f4       	brcc	.+22     	; 0x16fe <vfprintf+0x2ea>
    16e8:	34 fe       	sbrs	r3, 4
    16ea:	0b c0       	rjmp	.+22     	; 0x1702 <vfprintf+0x2ee>
    16ec:	32 fc       	sbrc	r3, 2
    16ee:	09 c0       	rjmp	.+18     	; 0x1702 <vfprintf+0x2ee>
    16f0:	83 2d       	mov	r24, r3
    16f2:	8e 7e       	andi	r24, 0xEE	; 238
    16f4:	a8 2e       	mov	r10, r24
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <vfprintf+0x2ee>
    16f8:	b8 2c       	mov	r11, r8
    16fa:	a3 2c       	mov	r10, r3
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <vfprintf+0x2f0>
    16fe:	b8 2c       	mov	r11, r8
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <vfprintf+0x2f0>
    1702:	b9 2c       	mov	r11, r9
    1704:	a4 fe       	sbrs	r10, 4
    1706:	0f c0       	rjmp	.+30     	; 0x1726 <vfprintf+0x312>
    1708:	fe 01       	movw	r30, r28
    170a:	e8 0d       	add	r30, r8
    170c:	f1 1d       	adc	r31, r1
    170e:	80 81       	ld	r24, Z
    1710:	80 33       	cpi	r24, 0x30	; 48
    1712:	21 f4       	brne	.+8      	; 0x171c <vfprintf+0x308>
    1714:	9a 2d       	mov	r25, r10
    1716:	99 7e       	andi	r25, 0xE9	; 233
    1718:	a9 2e       	mov	r10, r25
    171a:	09 c0       	rjmp	.+18     	; 0x172e <vfprintf+0x31a>
    171c:	a2 fe       	sbrs	r10, 2
    171e:	06 c0       	rjmp	.+12     	; 0x172c <vfprintf+0x318>
    1720:	b3 94       	inc	r11
    1722:	b3 94       	inc	r11
    1724:	04 c0       	rjmp	.+8      	; 0x172e <vfprintf+0x31a>
    1726:	8a 2d       	mov	r24, r10
    1728:	86 78       	andi	r24, 0x86	; 134
    172a:	09 f0       	breq	.+2      	; 0x172e <vfprintf+0x31a>
    172c:	b3 94       	inc	r11
    172e:	a3 fc       	sbrc	r10, 3
    1730:	10 c0       	rjmp	.+32     	; 0x1752 <vfprintf+0x33e>
    1732:	a0 fe       	sbrs	r10, 0
    1734:	06 c0       	rjmp	.+12     	; 0x1742 <vfprintf+0x32e>
    1736:	b2 14       	cp	r11, r2
    1738:	80 f4       	brcc	.+32     	; 0x175a <vfprintf+0x346>
    173a:	28 0c       	add	r2, r8
    173c:	92 2c       	mov	r9, r2
    173e:	9b 18       	sub	r9, r11
    1740:	0d c0       	rjmp	.+26     	; 0x175c <vfprintf+0x348>
    1742:	b2 14       	cp	r11, r2
    1744:	58 f4       	brcc	.+22     	; 0x175c <vfprintf+0x348>
    1746:	b6 01       	movw	r22, r12
    1748:	80 e2       	ldi	r24, 0x20	; 32
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	76 d0       	rcall	.+236    	; 0x183a <fputc>
    174e:	b3 94       	inc	r11
    1750:	f8 cf       	rjmp	.-16     	; 0x1742 <vfprintf+0x32e>
    1752:	b2 14       	cp	r11, r2
    1754:	18 f4       	brcc	.+6      	; 0x175c <vfprintf+0x348>
    1756:	2b 18       	sub	r2, r11
    1758:	02 c0       	rjmp	.+4      	; 0x175e <vfprintf+0x34a>
    175a:	98 2c       	mov	r9, r8
    175c:	21 2c       	mov	r2, r1
    175e:	a4 fe       	sbrs	r10, 4
    1760:	0f c0       	rjmp	.+30     	; 0x1780 <vfprintf+0x36c>
    1762:	b6 01       	movw	r22, r12
    1764:	80 e3       	ldi	r24, 0x30	; 48
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	68 d0       	rcall	.+208    	; 0x183a <fputc>
    176a:	a2 fe       	sbrs	r10, 2
    176c:	16 c0       	rjmp	.+44     	; 0x179a <vfprintf+0x386>
    176e:	a1 fc       	sbrc	r10, 1
    1770:	03 c0       	rjmp	.+6      	; 0x1778 <vfprintf+0x364>
    1772:	88 e7       	ldi	r24, 0x78	; 120
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 c0       	rjmp	.+4      	; 0x177c <vfprintf+0x368>
    1778:	88 e5       	ldi	r24, 0x58	; 88
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	b6 01       	movw	r22, r12
    177e:	0c c0       	rjmp	.+24     	; 0x1798 <vfprintf+0x384>
    1780:	8a 2d       	mov	r24, r10
    1782:	86 78       	andi	r24, 0x86	; 134
    1784:	51 f0       	breq	.+20     	; 0x179a <vfprintf+0x386>
    1786:	a1 fe       	sbrs	r10, 1
    1788:	02 c0       	rjmp	.+4      	; 0x178e <vfprintf+0x37a>
    178a:	8b e2       	ldi	r24, 0x2B	; 43
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <vfprintf+0x37c>
    178e:	80 e2       	ldi	r24, 0x20	; 32
    1790:	a7 fc       	sbrc	r10, 7
    1792:	8d e2       	ldi	r24, 0x2D	; 45
    1794:	b6 01       	movw	r22, r12
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	50 d0       	rcall	.+160    	; 0x183a <fputc>
    179a:	89 14       	cp	r8, r9
    179c:	30 f4       	brcc	.+12     	; 0x17aa <vfprintf+0x396>
    179e:	b6 01       	movw	r22, r12
    17a0:	80 e3       	ldi	r24, 0x30	; 48
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	4a d0       	rcall	.+148    	; 0x183a <fputc>
    17a6:	9a 94       	dec	r9
    17a8:	f8 cf       	rjmp	.-16     	; 0x179a <vfprintf+0x386>
    17aa:	8a 94       	dec	r8
    17ac:	f3 01       	movw	r30, r6
    17ae:	e8 0d       	add	r30, r8
    17b0:	f1 1d       	adc	r31, r1
    17b2:	80 81       	ld	r24, Z
    17b4:	b6 01       	movw	r22, r12
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	40 d0       	rcall	.+128    	; 0x183a <fputc>
    17ba:	81 10       	cpse	r8, r1
    17bc:	f6 cf       	rjmp	.-20     	; 0x17aa <vfprintf+0x396>
    17be:	22 20       	and	r2, r2
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <vfprintf+0x3b0>
    17c2:	4e ce       	rjmp	.-868    	; 0x1460 <vfprintf+0x4c>
    17c4:	b6 01       	movw	r22, r12
    17c6:	80 e2       	ldi	r24, 0x20	; 32
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	37 d0       	rcall	.+110    	; 0x183a <fputc>
    17cc:	2a 94       	dec	r2
    17ce:	f7 cf       	rjmp	.-18     	; 0x17be <vfprintf+0x3aa>
    17d0:	f6 01       	movw	r30, r12
    17d2:	86 81       	ldd	r24, Z+6	; 0x06
    17d4:	97 81       	ldd	r25, Z+7	; 0x07
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <vfprintf+0x3c8>
    17d8:	8f ef       	ldi	r24, 0xFF	; 255
    17da:	9f ef       	ldi	r25, 0xFF	; 255
    17dc:	2b 96       	adiw	r28, 0x0b	; 11
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	ff 90       	pop	r15
    17f2:	ef 90       	pop	r14
    17f4:	df 90       	pop	r13
    17f6:	cf 90       	pop	r12
    17f8:	bf 90       	pop	r11
    17fa:	af 90       	pop	r10
    17fc:	9f 90       	pop	r9
    17fe:	8f 90       	pop	r8
    1800:	7f 90       	pop	r7
    1802:	6f 90       	pop	r6
    1804:	5f 90       	pop	r5
    1806:	4f 90       	pop	r4
    1808:	3f 90       	pop	r3
    180a:	2f 90       	pop	r2
    180c:	08 95       	ret

0000180e <strnlen_P>:
    180e:	fc 01       	movw	r30, r24
    1810:	05 90       	lpm	r0, Z+
    1812:	61 50       	subi	r22, 0x01	; 1
    1814:	70 40       	sbci	r23, 0x00	; 0
    1816:	01 10       	cpse	r0, r1
    1818:	d8 f7       	brcc	.-10     	; 0x1810 <strnlen_P+0x2>
    181a:	80 95       	com	r24
    181c:	90 95       	com	r25
    181e:	8e 0f       	add	r24, r30
    1820:	9f 1f       	adc	r25, r31
    1822:	08 95       	ret

00001824 <strnlen>:
    1824:	fc 01       	movw	r30, r24
    1826:	61 50       	subi	r22, 0x01	; 1
    1828:	70 40       	sbci	r23, 0x00	; 0
    182a:	01 90       	ld	r0, Z+
    182c:	01 10       	cpse	r0, r1
    182e:	d8 f7       	brcc	.-10     	; 0x1826 <strnlen+0x2>
    1830:	80 95       	com	r24
    1832:	90 95       	com	r25
    1834:	8e 0f       	add	r24, r30
    1836:	9f 1f       	adc	r25, r31
    1838:	08 95       	ret

0000183a <fputc>:
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	fb 01       	movw	r30, r22
    1844:	23 81       	ldd	r18, Z+3	; 0x03
    1846:	21 fd       	sbrc	r18, 1
    1848:	03 c0       	rjmp	.+6      	; 0x1850 <fputc+0x16>
    184a:	8f ef       	ldi	r24, 0xFF	; 255
    184c:	9f ef       	ldi	r25, 0xFF	; 255
    184e:	2c c0       	rjmp	.+88     	; 0x18a8 <fputc+0x6e>
    1850:	22 ff       	sbrs	r18, 2
    1852:	16 c0       	rjmp	.+44     	; 0x1880 <fputc+0x46>
    1854:	46 81       	ldd	r20, Z+6	; 0x06
    1856:	57 81       	ldd	r21, Z+7	; 0x07
    1858:	24 81       	ldd	r18, Z+4	; 0x04
    185a:	35 81       	ldd	r19, Z+5	; 0x05
    185c:	42 17       	cp	r20, r18
    185e:	53 07       	cpc	r21, r19
    1860:	44 f4       	brge	.+16     	; 0x1872 <fputc+0x38>
    1862:	a0 81       	ld	r26, Z
    1864:	b1 81       	ldd	r27, Z+1	; 0x01
    1866:	9d 01       	movw	r18, r26
    1868:	2f 5f       	subi	r18, 0xFF	; 255
    186a:	3f 4f       	sbci	r19, 0xFF	; 255
    186c:	31 83       	std	Z+1, r19	; 0x01
    186e:	20 83       	st	Z, r18
    1870:	8c 93       	st	X, r24
    1872:	26 81       	ldd	r18, Z+6	; 0x06
    1874:	37 81       	ldd	r19, Z+7	; 0x07
    1876:	2f 5f       	subi	r18, 0xFF	; 255
    1878:	3f 4f       	sbci	r19, 0xFF	; 255
    187a:	37 83       	std	Z+7, r19	; 0x07
    187c:	26 83       	std	Z+6, r18	; 0x06
    187e:	14 c0       	rjmp	.+40     	; 0x18a8 <fputc+0x6e>
    1880:	8b 01       	movw	r16, r22
    1882:	ec 01       	movw	r28, r24
    1884:	fb 01       	movw	r30, r22
    1886:	00 84       	ldd	r0, Z+8	; 0x08
    1888:	f1 85       	ldd	r31, Z+9	; 0x09
    188a:	e0 2d       	mov	r30, r0
    188c:	09 95       	icall
    188e:	89 2b       	or	r24, r25
    1890:	e1 f6       	brne	.-72     	; 0x184a <fputc+0x10>
    1892:	d8 01       	movw	r26, r16
    1894:	16 96       	adiw	r26, 0x06	; 6
    1896:	8d 91       	ld	r24, X+
    1898:	9c 91       	ld	r25, X
    189a:	17 97       	sbiw	r26, 0x07	; 7
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	17 96       	adiw	r26, 0x07	; 7
    18a0:	9c 93       	st	X, r25
    18a2:	8e 93       	st	-X, r24
    18a4:	16 97       	sbiw	r26, 0x06	; 6
    18a6:	ce 01       	movw	r24, r28
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	08 95       	ret

000018b2 <__ultoa_invert>:
    18b2:	fa 01       	movw	r30, r20
    18b4:	aa 27       	eor	r26, r26
    18b6:	28 30       	cpi	r18, 0x08	; 8
    18b8:	51 f1       	breq	.+84     	; 0x190e <__ultoa_invert+0x5c>
    18ba:	20 31       	cpi	r18, 0x10	; 16
    18bc:	81 f1       	breq	.+96     	; 0x191e <__ultoa_invert+0x6c>
    18be:	e8 94       	clt
    18c0:	6f 93       	push	r22
    18c2:	6e 7f       	andi	r22, 0xFE	; 254
    18c4:	6e 5f       	subi	r22, 0xFE	; 254
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255
    18c8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	af 4f       	sbci	r26, 0xFF	; 255
    18ce:	b1 e0       	ldi	r27, 0x01	; 1
    18d0:	3e d0       	rcall	.+124    	; 0x194e <__ultoa_invert+0x9c>
    18d2:	b4 e0       	ldi	r27, 0x04	; 4
    18d4:	3c d0       	rcall	.+120    	; 0x194e <__ultoa_invert+0x9c>
    18d6:	67 0f       	add	r22, r23
    18d8:	78 1f       	adc	r23, r24
    18da:	89 1f       	adc	r24, r25
    18dc:	9a 1f       	adc	r25, r26
    18de:	a1 1d       	adc	r26, r1
    18e0:	68 0f       	add	r22, r24
    18e2:	79 1f       	adc	r23, r25
    18e4:	8a 1f       	adc	r24, r26
    18e6:	91 1d       	adc	r25, r1
    18e8:	a1 1d       	adc	r26, r1
    18ea:	6a 0f       	add	r22, r26
    18ec:	71 1d       	adc	r23, r1
    18ee:	81 1d       	adc	r24, r1
    18f0:	91 1d       	adc	r25, r1
    18f2:	a1 1d       	adc	r26, r1
    18f4:	20 d0       	rcall	.+64     	; 0x1936 <__ultoa_invert+0x84>
    18f6:	09 f4       	brne	.+2      	; 0x18fa <__ultoa_invert+0x48>
    18f8:	68 94       	set
    18fa:	3f 91       	pop	r19
    18fc:	2a e0       	ldi	r18, 0x0A	; 10
    18fe:	26 9f       	mul	r18, r22
    1900:	11 24       	eor	r1, r1
    1902:	30 19       	sub	r19, r0
    1904:	30 5d       	subi	r19, 0xD0	; 208
    1906:	31 93       	st	Z+, r19
    1908:	de f6       	brtc	.-74     	; 0x18c0 <__ultoa_invert+0xe>
    190a:	cf 01       	movw	r24, r30
    190c:	08 95       	ret
    190e:	46 2f       	mov	r20, r22
    1910:	47 70       	andi	r20, 0x07	; 7
    1912:	40 5d       	subi	r20, 0xD0	; 208
    1914:	41 93       	st	Z+, r20
    1916:	b3 e0       	ldi	r27, 0x03	; 3
    1918:	0f d0       	rcall	.+30     	; 0x1938 <__ultoa_invert+0x86>
    191a:	c9 f7       	brne	.-14     	; 0x190e <__ultoa_invert+0x5c>
    191c:	f6 cf       	rjmp	.-20     	; 0x190a <__ultoa_invert+0x58>
    191e:	46 2f       	mov	r20, r22
    1920:	4f 70       	andi	r20, 0x0F	; 15
    1922:	40 5d       	subi	r20, 0xD0	; 208
    1924:	4a 33       	cpi	r20, 0x3A	; 58
    1926:	18 f0       	brcs	.+6      	; 0x192e <__ultoa_invert+0x7c>
    1928:	49 5d       	subi	r20, 0xD9	; 217
    192a:	31 fd       	sbrc	r19, 1
    192c:	40 52       	subi	r20, 0x20	; 32
    192e:	41 93       	st	Z+, r20
    1930:	02 d0       	rcall	.+4      	; 0x1936 <__ultoa_invert+0x84>
    1932:	a9 f7       	brne	.-22     	; 0x191e <__ultoa_invert+0x6c>
    1934:	ea cf       	rjmp	.-44     	; 0x190a <__ultoa_invert+0x58>
    1936:	b4 e0       	ldi	r27, 0x04	; 4
    1938:	a6 95       	lsr	r26
    193a:	97 95       	ror	r25
    193c:	87 95       	ror	r24
    193e:	77 95       	ror	r23
    1940:	67 95       	ror	r22
    1942:	ba 95       	dec	r27
    1944:	c9 f7       	brne	.-14     	; 0x1938 <__ultoa_invert+0x86>
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	61 05       	cpc	r22, r1
    194a:	71 05       	cpc	r23, r1
    194c:	08 95       	ret
    194e:	9b 01       	movw	r18, r22
    1950:	ac 01       	movw	r20, r24
    1952:	0a 2e       	mov	r0, r26
    1954:	06 94       	lsr	r0
    1956:	57 95       	ror	r21
    1958:	47 95       	ror	r20
    195a:	37 95       	ror	r19
    195c:	27 95       	ror	r18
    195e:	ba 95       	dec	r27
    1960:	c9 f7       	brne	.-14     	; 0x1954 <__ultoa_invert+0xa2>
    1962:	62 0f       	add	r22, r18
    1964:	73 1f       	adc	r23, r19
    1966:	84 1f       	adc	r24, r20
    1968:	95 1f       	adc	r25, r21
    196a:	a0 1d       	adc	r26, r0
    196c:	08 95       	ret

0000196e <_exit>:
    196e:	f8 94       	cli

00001970 <__stop_program>:
    1970:	ff cf       	rjmp	.-2      	; 0x1970 <__stop_program>
